#!/bin/bash
src_file_path=" "
option=" "
obj_list=" "
src_list=""
link=false
out=""
std="-std=gnu99"

# maple options
O2="--O2 --quiet: --O2 --quiet: --O2 --quiet --no-pie --verbose-asm"
O0="--O0 --quiet --no-pie --verbose-asm"

# config front end compiler
use_mplfe=true
use_clang2mpl=false
# config maple optimization level
use_O2=true
# config mpl or bpl
use_bpl=false

if [ "$use_bpl" == "true" ];then
  WHIRL_OPT=""
  suffix="bpl"
else
  WHIRL_OPT="-a"
  suffix="mpl"
fi

MAPLE_BIN=$MAPLE_ROOT/output/aarch64-clang-release/bin

LINARO=$MAPLE_ROOT/tools/gcc-linaro-7.5.0
ISYSTEM_FLAGS="-isystem $LINARO/aarch64-linux-gnu/libc/usr/include -isystem $LINARO/lib/gcc/aarch64-linux-gnu/7.5.0/include"
CLANG_COMMON_FLAGS="-U __SIZEOF_INT128__ $ISYSTEM_FLAGS"
CLANGFE_FLAGS="-cc1 ${std} -emit-llvm -triple aarch64-linux-gnu -D__clang__ -D__BLOCKS__ $CLANG_COMMON_FLAGS -fgnu89-inline"
CLANG2MPL_FLAGS="--target=aarch64-linux-elf -Wno-return-type -U__SIZEOF_INT128__"
CLANG_FLAGS="--target=aarch64 $CLANG_COMMON_FLAGS -emit-ast"
SELF_CMD="${0} ${@}"
echo $SELF_CMD

while [ $# -ne 0 ]; do
    case "$1" in
        -O2)
            use_O2=true
            ;;
        -O0)
            use_O2=false
            ;;
        --c2m)
            use_mplfe=false
            use_clang2mpl=true
            ;;
        --list)
            shift
            list_mode=true
            src_list="$1"
            ;;
        -v)
            exit 0
            ;;
        -b)
            WHIRL_OPT=""
            suffix="bpl"
            ;;
        -o)
            shift
            out="-o $1"
            ;;
        -I)
            option=$option"$1"" "
            shift
            option=$option"$1"" "
            ;;
        -c)
            ;;
        -f*)
            ;;
        -*)
            option=$option"$1"" "
            ;;
        *.o)
            obj_list=$obj_list"$1"" "
            link=true
            ;;
        *.c)
            src_file_path="$1"
            ;;
    esac
    shift
done

function mplfe() {
  src_file_path=$1
  fileName=$2
  # generate .B
  echo "Start Front End for $1 :"
  echo $MAPLE_ROOT/tools/bin/clang $CLANG_FLAGS $option $src_file_path -o $fileName.ast
  $MAPLE_ROOT/tools/bin/clang $CLANG_FLAGS $option $src_file_path -o $fileName.ast || {
   echo "FAILED: "
   echo -e $MAPLE_ROOT/tools/bin/clang $CLANG_FLAGS $option $src_file_path | tee -a clang_err.log;
   exit 1;
  }
  # generate .mpl
  echo $MAPLE_BIN/mplfe $fileName.ast
  $MAPLE_BIN/mplfe $fileName.ast 1>/dev/null || {
   echo "FAILED: "
   echo -e $MAPLE_BIN/mplfe $fileName.ast | tee -a mplfe_err.log;
   exit 1;
  }
}

function clangfe() {
  src_file_path=$1
  fileName=$2
  # generate .B
  echo "Start Front End for $1 :"
  $OPEN64BIN/clangfe $CLANGFE_FLAGS $option $src_file_path || {
   echo "FAILED: "
   echo -e $OPEN64BIN/clangfe $CLANGFE_FLAGS $option $src_file_path | tee -a clangfe_err.log;
   exit 1;
  }
  # generate .mpl
  $OPEN64BIN/whirl2mpl $WHIRL_OPT $fileName.B 1>/dev/null || {
   echo "FAILED: "
   echo -e $OPEN64BIN/whirl2mpl $WHIRL_OPT $fileName.B | tee -a whirl_err.log;
   exit 1;
  }
}

function clangTompl() {
  src_file_path=$1
  fileName=$2
  # generate .B
  echo "Start Front End for $1 :"
  echo clang2mpl --ascii "$src_file_path" -- $CLANG2MPL_FLAGS $option
  clang2mpl --ascii "$src_file_path" -- $CLANG2MPL_FLAGS $option  || {
   echo "FAILED: "
   echo -e "LD_LIBRARY_PATH=${MAPLE_ROOT}/../ouroboros/driver/script/lib /usr/bin/clang2mpl --ascii" $src_file_path "--" $CLANG_FLAGS $option  | tee -a clang2mpl_err.log;
   exit 1;
  }
}

function compile() {
  src_file_path=$1
  src_file_path=$(realpath $src_file_path)
  fileName=${src_file_path%\.c*}

  if [ "$use_clang2mpl" == "true" ];then
    clangTompl $src_file_path $fileName
  elif [ "$use_mplfe" == "true" ];then
    mplfe $src_file_path $fileName
  else
    clangfe $src_file_path $fileName
  fi

  # generate .s
  echo "Start Middle End for $1 :"
  if [ "$use_O2" == "true" ];then
    echo $MAPLE_BIN/maple --run=me:mpl2mpl:mplcg --option=\"$O2\" "${fileName}.${suffix}"
    $MAPLE_BIN/maple --run=me:mpl2mpl:mplcg --option="$O2" "${fileName}.${suffix}" || {
      echo "FAILED: "
      echo "" >> comb_err.log
      echo "error in compiling $1" >> comb_err.log;
      echo -e $MAPLE_BIN/maple --run=me:mpl2mpl:mplcg --option=\"$O2\" "${fileName}.${suffix}" | tee -a comb_err.log;
      echo >> comb_err.log
      echo -e "[whole compile cmd]: "$SELF_CMD >> comb_err.log
      echo "" >> comb_err.log
      exit 1;
    }
  else
    echo $MAPLE_BIN/maple --run=mplcg --option=\"$O0\" "${fileName}.${suffix}"
    $MAPLE_BIN/maple --run=mplcg --option="$O0" "${fileName}.${suffix}" || {
      echo "FAILED: "
      echo "" >> comb_err.log
      echo "error in compiling $1" >> comb_err.log;
      echo -e $MAPLE_BIN/maple --run=mplcg --option=\"$O0\" "${fileName}.${suffix}" | tee -a comb_err.log;
      echo "" >> comb_err.log
      echo -e "[whole compile cmd]: "$SELF_CMD >> comb_err.log
      echo "" >> comb_err.log
      exit 1;
    }
  fi
  # generate bin
  echo $LINARO/bin/aarch64-linux-gnu-gcc -std=c99 $out -c "${fileName}.s"
  $LINARO/bin/aarch64-linux-gnu-gcc -std=c99 $out -c "${fileName}.s" || {
    echo "FAILED: "
    echo "" >> asm_err.log
    echo "error in compiling $1" >> asm_err.log;
    echo -e $LINARO/bin/aarch64-linux-gnu-gcc -O2 -std=c99 "$out" -c "${fileName}.s" | tee -a asm_err.log;
    echo "" >> asm_err.log
    echo -e "[whole compile cmd]: "$SELF_CMD >> asm_err.log
    echo "" >> asm_err.log
    exit 1;
  }
  echo ""
}

if [ "$link" == "true" ];then
  echo -e $obj_list
  echo -e $obj_list > obj.list
  echo -e $LINARO/bin/aarch64-linux-gnu-gcc ${std} $option \"$@\" $out
  echo -e $LINARO/bin/aarch64-linux-gnu-gcc ${std} $option "\$@" $out > link.cmd
  $LINARO/bin/aarch64-linux-gnu-gcc ${std} -no-pie $obj_list $option $out || {
    echo "FAILED: "
    echo "" >> link_err.log
    echo "error in compiling $1" >> link_err.log;
    echo -e $LINARO/bin/aarch64-linux-gnu-gcc ${std} -no-pie $obj_list $option $out | tee -a link_err.log;
    echo "" >> link_err.log
    echo -e "[whole compile cmd]: "$SELF_CMD >> link_err.log
    echo "" >> link_err.log
    exit 1;
  }
  exit 0
fi

if [ "$list_mode" == "true" ];then
  cat $src_list | grep "\.c" | while read line
  do
   compile  `echo ${line} | awk '{print $NF}'`
  done
else
  compile "${src_file_path}"
fi

exit 0
