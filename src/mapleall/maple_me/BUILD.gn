#
# Copyright (c) [2020-2021] Huawei Technologies Co.,Ltd.All rights reserved.
#
# OpenArkCompiler is licensed under Mulan PSL v2.
# You can use this software according to the terms and conditions of the Mulan PSL v2.
# You may obtain a copy of Mulan PSL v2 at:
#
#     http://license.coscl.org.cn/MulanPSL2
#
# THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR
# FIT FOR A PARTICULAR PURPOSE.
# See the Mulan PSL v2 for more details.
#
include_directories = [
  "${MAPLEALL_ROOT}/maple_ir/include",
  "${MAPLEALL_ROOT}/mempool/include",
  "${THIRD_PARTY_ROOT}/bounds_checking_function/include",
  "${MAPLEALL_ROOT}/maple_me/include",
  "${MAPLEALL_ROOT}/maple_ipa/include",
  "${MAPLEALL_ROOT}/mpl2mpl/include",
  "${MAPLEALL_ROOT}/maple_util/include",
  "${MAPLEALL_ROOT}/maple_driver/include",
  "${MAPLEALL_ROOT}/maple_phase/include",
]

src_libmplme = [
  "src/dse.cpp",
  "src/hdse.cpp",
  "src/prop.cpp",
  "src/me_alias_class.cpp",
  "src/me_critical_edge.cpp",
  "src/me_bb_layout.cpp",
  "src/me_bypath_eh.cpp",
  "src/me_profile_gen.cpp",
  "src/me_profile_use.cpp",
  "src/me_cfg.cpp",
  "src/me_dse.cpp",
  "src/me_hdse.cpp",
  "src/me_dominance.cpp",
  "src/me_emit.cpp",
  "src/me_ssa_devirtual.cpp",
  "src/ssa_devirtual.cpp",
  "src/me_function.cpp",
  "src/me_loop_analysis.cpp",
  "src/me_irmap.cpp",
  "src/me_irmap_build.cpp",
  "src/me_analyzector.cpp",
  "src/me_loop_canon.cpp",
  "src/me_scalar_analysis.cpp",
  "src/me_loop_unrolling.cpp",
  "src/me_option.cpp",
  "src/me_phase_manager.cpp",
  "src/me_prop.cpp",
  "src/copy_prop.cpp",
  "src/me_placement_rc.cpp",
  "src/me_analyze_rc.cpp",
  "src/me_delegate_rc.cpp",
  "src/me_cond_based_opt.cpp",
  "src/me_rc_lowering.cpp",
  "src/me_lower_globals.cpp",
  "src/me_may2dassign.cpp",
  "src/preg_renamer.cpp",
  "src/me_rename2preg.cpp",
  "src/me_ssa.cpp",
  "src/me_ssa_tab.cpp",
  "src/me_ssa_update.cpp",
  "src/me_stmt_fre.cpp",
  "src/me_stmt_pre.cpp",
  "src/me_store_pre.cpp",
  "src/me_ssa_epre.cpp",
  "src/me_ssa_lpre.cpp",
  "src/me_ssu_pre.cpp",
  "src/ssa_epre.cpp",
  "src/ssa_pre.cpp",
  "src/ssa_epre_for_sr.cpp",
  "src/ssa_epre_for_lftr.cpp",
  "src/occur.cpp",
  "src/me_inequality_graph.cpp",
  "src/me_abco.cpp",
  "src/me_ssi.cpp",
  "src/me_cfg_opt.cpp",
  "src/me_predict.cpp",
  "src/me_check_cast.cpp",
  "src/ipa_side_effect.cpp",
  "src/me_bb_analyze.cpp",
  "src/meconstprop.cpp",
  "src/sync_select.cpp",
  "src/me_gc_lowering.cpp",
  "src/me_gc_write_barrier_opt.cpp",
  "src/me_subsum_rc.cpp",
  "src/me_func_opt.cpp",
  "src/me_verify.cpp",
  "src/me_fsaa.cpp",
  "src/lfo_mir_lower.cpp",
  "src/lfo_inject_iv.cpp",
  "src/lfo_pre_emit.cpp",
  "src/lfo_iv_canon.cpp",
  "src/lfo_dep_test.cpp",
  "src/lfo_loop_vec.cpp",
  "src/me_value_range_prop.cpp",
  "src/cfg_opt.cpp",
]

src_libmplmewpo = [
  "src/alias_class.cpp",
  "src/demand_driven_alias_analysis.cpp",
  "src/bb.cpp",
  "src/dominance.cpp",
  "src/func_emit.cpp",
  "src/irmap.cpp",
  "src/irmap_build.cpp",
  "src/irmap_emit.cpp",
  "src/me_ir.cpp",
  "src/orig_symbol.cpp",
  "src/ssa.cpp",
  "src/ssa_mir_nodes.cpp",
  "src/ssa_tab.cpp",
  "src/ver_symbol.cpp",
]

configs = [ "${MAPLEALL_ROOT}:mapleallcompilecfg" ]

static_library("libmplme") {
  sources = src_libmplme
  include_dirs = include_directories
  output_dir = "${root_out_dir}/lib/${HOST_ARCH}"
}

static_library("libmplmewpo") {
  sources = src_libmplmewpo
  include_dirs = include_directories
  output_dir = "${root_out_dir}/lib/${HOST_ARCH}"
}
