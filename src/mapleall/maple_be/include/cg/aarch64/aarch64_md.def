/*
 * Copyright (c) [2020-2021] Huawei Technologies Co.,Ltd.All rights reserved.
 *
 * OpenArkCompiler is licensed under the Mulan PSL v1.
 * You can use this software according to the terms and conditions of the Mulan PSL v1.
 * You may obtain a copy of Mulan PSL v1 at:
 *
 *     http://license.coscl.org.cn/MulanPSL
 *
 * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR
 * FIT FOR A PARTICULAR PURPOSE.
 * See the Mulan PSL v1 for more details.
 */
/* {mop, opnds, prop, latency, name, format, length} */
/* MOP_undef, */
DEFINE_MOP(MOP_undef, {},0,kLtUndef,"","",0)

/* # Definitions */

/* AARCH64 MOVES */
/* MOP_xmovrr */
DEFINE_MOP(MOP_xmovrr, {mopdReg64ID,mopdReg64IS},ISMOVE,kLtAlu,"mov","0,1",1)
/* MOP_wmovrr */
DEFINE_MOP(MOP_wmovrr, {mopdReg32ID,mopdReg32IS},ISMOVE,kLtAlu,"mov","0,1",1)
/* MOP_xmovri32 */
DEFINE_MOP(MOP_xmovri32, {mopdReg32ID,mopdImm32},ISMOVE,kLtAlu,"mov","0,1",1)
/* MOP_xmovri64 */
DEFINE_MOP(MOP_xmovri64, {mopdReg64ID,mopdImm64},ISMOVE,kLtAlu,"mov","0,1",1)

/* MOP_xvmovsr */
DEFINE_MOP(MOP_xvmovsr, {mopdReg32FD,mopdReg32IS},ISMOVE,kLtR2f,"fmov","0,1",1)
/* MOP_xvmovdr */
DEFINE_MOP(MOP_xvmovdr, {mopdReg64FD,mopdReg64IS},ISMOVE,kLtR2f,"fmov","0,1",1)
/* MOP_xvmovrs */
DEFINE_MOP(MOP_xvmovrs, {mopdReg32ID,mopdReg32FS},ISMOVE,kLtF2r,"fmov","0,1",1)
/* MOP_xvmovrd */
DEFINE_MOP(MOP_xvmovrd, {mopdReg64ID,mopdReg64FS},ISMOVE,kLtF2r,"fmov","0,1",1)
/* MOP_xvmovs */
DEFINE_MOP(MOP_xvmovs, {mopdReg32FD,mopdReg32FS},ISMOVE,kLtFpalu,"fmov","0,1",1)
/* MOP_xvmovd */
DEFINE_MOP(MOP_xvmovd, {mopdReg64FD,mopdReg64FS},ISMOVE,kLtFpalu,"fmov","0,1",1)

/* Vector SIMD mov */
/* MOP_xmovrv */
DEFINE_MOP(MOP_xvmovrv, {mopdReg32ID,mopdReg32FS},ISMOVE,kLtF2r,"mov","0,1",1)

/* MOP_xadrp */
DEFINE_MOP(MOP_xadrp, {mopdReg64ID,mopdLiteral},ISLOADADDR,kLtShift,"adrp","0,1",1)
/* MOP_xadr */
DEFINE_MOP(MOP_xadri64, {mopdReg64ID,mopdImm64},ISLOADADDR,kLtShift,"adr","0,1",1)
/* MOP_xadrpl12 */
DEFINE_MOP(MOP_xadrpl12, {mopdReg64ID,mopdReg64IS,mopdLiteralL12},0,kLtAlu,"add","0,1,2",1)

/* MOP_xaddrrr	AARCH64 Arithmetic: add */
DEFINE_MOP(MOP_xaddrrr, {mopdReg64ID,mopdReg64IS,mopdReg64IS},0,kLtAlu,"add","0,1,2",1)
/* MOP_xaddrrrs */
DEFINE_MOP(MOP_xaddrrrs, {mopdReg64ID,mopdReg64IS,mopdReg64IS,mopdBitShift64},0,kLtAluShift,"add","0,1,2,3",1)
/* MOP_xxwaddrrre */
DEFINE_MOP(MOP_xxwaddrrre, {mopdReg64ID,mopdReg64IS,mopdReg32IS,mopdExtendShift64},0,kLtAluShift,"add","0,1,2,3",1)
/* MOP_xaddrri24 */
DEFINE_MOP(MOP_xaddrri24, {mopdReg64ID,mopdReg64IS,mopdImm12,mopdLSL12},0,kLtShift,"add","0,1,2,3",1)
/* MOP_xaddrri12 */
DEFINE_MOP(MOP_xaddrri12, {mopdReg64ID,mopdReg64IS,mopdImm12},0,kLtAlu,"add","0,1,2",1)
/* MOP_waddrrr */
DEFINE_MOP(MOP_waddrrr, {mopdReg32ID,mopdReg32IS,mopdReg32IS},0,kLtAlu,"add","0,1,2",1)
/* MOP_waddrrrs */
DEFINE_MOP(MOP_waddrrrs, {mopdReg32ID,mopdReg32IS,mopdReg32IS,mopdBitShift32},0,kLtAluShift,"add","0,1,2,3",1)
/* MOP_xxwaddrrre */
DEFINE_MOP(MOP_wwwaddrrre, {mopdReg32ID,mopdReg32IS,mopdReg32IS,mopdExtendShift64},0,kLtAluShift,"add","0,1,2,3",1)
/* MOP_waddrri24 */
DEFINE_MOP(MOP_waddrri24, {mopdReg32ID,mopdReg32IS,mopdImm12,mopdLSL12},0,kLtAluShift,"add","0,1,2,3",1)
/* MOP_waddrri12 */
DEFINE_MOP(MOP_waddrri12, {mopdReg32ID,mopdReg32IS,mopdImm12},0,kLtAlu,"add","0,1,2",1)
/* MOP_dadd */
DEFINE_MOP(MOP_dadd, {mopdReg64FD,mopdReg64FS,mopdReg64FS},0,kLtFpalu,"fadd","0,1,2",1)
/* MOP_sadd */
DEFINE_MOP(MOP_sadd, {mopdReg32FD,mopdReg32FS,mopdReg32FS},0,kLtFpalu,"fadd","0,1,2",1)

/* AARCH64 Arithmetic: sub */
/* MOP_xsubrrr */
DEFINE_MOP(MOP_xsubrrr, {mopdReg64ID,mopdReg64IS,mopdReg64IS},0,kLtAlu,"sub","0,1,2",1)
/* MOP_xsubsrrr */
DEFINE_MOP(MOP_xsubsrrr, {mopdRegCCD, mopdReg64ID,mopdReg64IS,mopdReg64IS},0,kLtAlu,"subs","1,2,3",1)
/* MOP_xsubrrrs */
DEFINE_MOP(MOP_xsubrrrs, {mopdReg64ID,mopdReg64IS,mopdReg64IS,mopdBitShift64},0,kLtAluShift,"sub","0,1,2,3",1)
/* MOP_xxwsubrrre */
DEFINE_MOP(MOP_xxwsubrrre, {mopdReg64ID,mopdReg64IS,mopdReg32IS,mopdExtendShift64},0,kLtAluShift,"sub","0,1,2,3",1)
/* MOP_xsubsrrrs */
DEFINE_MOP(MOP_xsubsrrrs, {mopdRegCCD, mopdReg64ID,mopdReg64IS,mopdReg64IS,mopdBitShift64},0,kLtAluShift,"subs","1,2,3,4",1)
/* MOP_xsubrri24 */
DEFINE_MOP(MOP_xsubrri24, {mopdReg64ID,mopdReg64IS,mopdImm12,mopdLSL12},0,kLtAluShift,"sub","0,1,2,3",1)
/* MOP_xsubsrri24 */
DEFINE_MOP(MOP_xsubsrri24, {mopdRegCCD, mopdReg64ID,mopdReg64IS,mopdImm12,mopdLSL12},0,kLtAluShift,"subs","1,2,3,4",1)
/* MOP_xsubrri12 */
DEFINE_MOP(MOP_xsubrri12, {mopdReg64ID,mopdReg64IS,mopdImm12},0,kLtAlu,"sub","0,1,2",1)
/* MOP_xsubsrri12 */
DEFINE_MOP(MOP_xsubsrri12, {mopdRegCCD, mopdReg64ID,mopdReg64IS,mopdImm12},0,kLtAlu,"subs","1,2,3",1)
/* MOP_wsubrrr */
DEFINE_MOP(MOP_wsubrrr, {mopdReg32ID,mopdReg32IS,mopdReg32IS},0,kLtAlu,"sub","0,1,2",1)
/* MOP_wsubsrrr */
DEFINE_MOP(MOP_wsubsrrr, {mopdRegCCD,mopdReg32ID,mopdReg32IS,mopdReg32IS},0,kLtAlu,"subs","1,2,3",1)
/* MOP_wsubrrrs */
DEFINE_MOP(MOP_wsubrrrs, {mopdReg32ID,mopdReg32IS,mopdReg32IS,mopdBitShift32},0,kLtAluShift,"sub","0,1,2,3",1)
/* MOP_wwwsubrrre */
DEFINE_MOP(MOP_wwwsubrrre, {mopdReg32ID,mopdReg32IS,mopdReg32IS,mopdExtendShift64},0,kLtAluShift,"sub","0,1,2,3",1)
/* MOP_wsubsrrrs */
DEFINE_MOP(MOP_wsubsrrrs, {mopdRegCCD,mopdReg32ID,mopdReg32IS,mopdReg32IS,mopdBitShift32},0,kLtAluShift,"subs","1,2,3,4",1)
/* MOP_wsubrri24 */
DEFINE_MOP(MOP_wsubrri24, {mopdReg32ID,mopdReg32IS,mopdImm12,mopdLSL12},0,kLtAluShift,"sub","0,1,2,3",1)
/* MOP_wsubsrri24 */
DEFINE_MOP(MOP_wsubsrri24, {mopdRegCCD,mopdReg32ID,mopdReg32IS,mopdImm12,mopdLSL12},0,kLtAluShift,"subs","1,2,3,4",1)
/* MOP_wsubrri12 */
DEFINE_MOP(MOP_wsubrri12, {mopdReg32ID,mopdReg32IS,mopdImm12},0,kLtAlu,"sub","0,1,2",1)
/* MOP_wsubsrri12 */
DEFINE_MOP(MOP_wsubsrri12, {mopdRegCCD,mopdReg32ID,mopdReg32IS,mopdImm12},0,kLtAlu,"subs","1,2,3",1)
/* MOP_dsub */
DEFINE_MOP(MOP_dsub, {mopdReg64FD,mopdReg64FS,mopdReg64FS},0,kLtFpalu,"fsub","0,1,2",1)
/* MOP_ssub */
DEFINE_MOP(MOP_ssub, {mopdReg32FD,mopdReg32FS,mopdReg32FS},0,kLtFpalu,"fsub","0,1,2",1)

/* AARCH64 Arithmetic: multiply */
/* MOP_Tbxmulrrr */
DEFINE_MOP(MOP_xmulrrr, {mopdReg64ID,mopdReg64IS,mopdReg64IS},0,kLtMul,"mul","0,1,2",1)
/* MOP_wmulrrr */
DEFINE_MOP(MOP_wmulrrr, {mopdReg32ID,mopdReg32IS,mopdReg32IS},0,kLtMul,"mul","0,1,2",1)
/* MOP_Tbxvmuls */
DEFINE_MOP(MOP_xvmuls, {mopdReg32FD,mopdReg32FS,mopdReg32FS},0,kLtFpmul,"fmul","0,1,2",1)
/* MOP_Tbxvmuld */
DEFINE_MOP(MOP_xvmuld, {mopdReg64FD,mopdReg64FS,mopdReg64FS},0,kLtFpmul,"fmul","0,1,2",1)
/*MOP_xsmullrrr */
DEFINE_MOP(MOP_xsmullrrr, {mopdReg64ID,mopdReg32IS,mopdReg32IS},0,kLtMul,"smull","0,1,2",1)

/* AARCH64 Arithmetic: multiply first then add */
/* MOP_xmaddrrrr */
DEFINE_MOP(MOP_xmaddrrrr, {mopdReg64ID,mopdReg64IS,mopdReg64IS,mopdReg64IS},0,kLtMul,"madd","0,1,2,3",1)
/* MOP_wmaddrrrr */
DEFINE_MOP(MOP_wmaddrrrr, {mopdReg32ID,mopdReg32IS,mopdReg32IS,mopdReg32IS},0,kLtMul,"madd","0,1,2,3",1)

/* AARCH64 leading zeros, reverse bits (for trailing zeros) */
/* MOP_wclz */
DEFINE_MOP(MOP_wclz, {mopdReg32ID,mopdReg32IS},0,kLtAlu,"clz","0,1", 1)
/* MOP_xclz */
DEFINE_MOP(MOP_xclz, {mopdReg64ID,mopdReg64IS},0,kLtAlu,"clz","0,1", 1)
/* MOP_wrbit */
DEFINE_MOP(MOP_wrbit, {mopdReg32ID,mopdReg32IS},0,kLtAlu,"rbit","0,1", 1)
/* MOP_xrbit */
DEFINE_MOP(MOP_xrbit, {mopdReg64ID,mopdReg64IS},0,kLtAlu,"rbit","0,1", 1)

/* AARCH64 Conversions */
/* MOP_xsxtb32 */
DEFINE_MOP(MOP_xsxtb32, {mopdReg32ID,mopdReg32IS},ISCONVERSION,kLtAluShift,"sxtb","0,1",1)
/* MOP_xsxtb64 */
DEFINE_MOP(MOP_xsxtb64, {mopdReg64ID,mopdReg32IS},ISCONVERSION,kLtAluShift,"sxtb","0,1",1)
/* MOP_xsxth32 */
DEFINE_MOP(MOP_xsxth32, {mopdReg32ID,mopdReg32IS},ISCONVERSION,kLtAluShift,"sxth","0,1",1)
/* MOP_xsxth64 */
DEFINE_MOP(MOP_xsxth64, {mopdReg64ID,mopdReg32IS},ISCONVERSION,kLtAluShift,"sxth","0,1",1)
/* MOP_xsxtw64 */
DEFINE_MOP(MOP_xsxtw64, {mopdReg64ID,mopdReg32IS},ISCONVERSION,kLtAluShift,"sxtw","0,1",1)

/* MOP_xuxtb32 */
DEFINE_MOP(MOP_xuxtb32, {mopdReg32ID,mopdReg32IS},ISCONVERSION,kLtAluShift,"uxtb","0,1",1)
/* MOP_xuxth32 */
DEFINE_MOP(MOP_xuxth32, {mopdReg32ID,mopdReg32IS},ISCONVERSION,kLtAluShift,"uxth","0,1",1)
/* MOP_xuxtw64	Same as mov w0,w0 */
DEFINE_MOP(MOP_xuxtw64, {mopdReg64ID,mopdReg32IS},ISCONVERSION,kLtAluShift,"uxtw","0,1",1)

/* MOP_xvcvtfd */
DEFINE_MOP(MOP_xvcvtfd, {mopdReg32FD,mopdReg64FS},ISCONVERSION,kLtFpalu,"fcvt","0,1",1)
/* MOP_xvcvtdf */
DEFINE_MOP(MOP_xvcvtdf, {mopdReg64FD,mopdReg32FS},ISCONVERSION,kLtFpalu,"fcvt","0,1",1)

/* MOP_vcvtrf		fcvtzs w,s */
DEFINE_MOP(MOP_vcvtrf, {mopdReg32ID,mopdReg32FS},ISCONVERSION,kLtF2rCvt,"fcvtzs","0,1",1)
/* MOP_xvcvtrf	fcvtzs x,s */
DEFINE_MOP(MOP_xvcvtrf, {mopdReg64ID,mopdReg32FS},ISCONVERSION,kLtF2rCvt,"fcvtzs","0,1",1)
/* MOP_vcvturf	fcvtzu w,s */
DEFINE_MOP(MOP_vcvturf, {mopdReg32ID,mopdReg32FS},ISCONVERSION,kLtF2rCvt,"fcvtzu","0,1",1)
/* MOP_xvcvturf	fcvtzu x,s */
DEFINE_MOP(MOP_xvcvturf, {mopdReg64ID,mopdReg32FS},ISCONVERSION,kLtF2rCvt,"fcvtzu","0,1",1)

/* MOP_vcvtas         fcvtas w,s (for round) */
DEFINE_MOP(MOP_vcvtas, {mopdReg32ID,mopdReg32FS},ISCONVERSION,kLtF2rCvt,"fcvtas","0,1",1)
/* MOP_xvcvtas        fcvtas x,s */
DEFINE_MOP(MOP_xvcvtas, {mopdReg64ID,mopdReg64FS},ISCONVERSION,kLtF2rCvt,"fcvtas","0,1",1)
/* MOP_vcvtms         fcvtms w,s (for floor) */
DEFINE_MOP(MOP_vcvtms, {mopdReg32ID,mopdReg32FS},ISCONVERSION,kLtF2rCvt,"fcvtms","0,1",1)
/* MOP_xvcvtms        fcvtms x,s */
DEFINE_MOP(MOP_xvcvtms, {mopdReg64ID,mopdReg64FS},ISCONVERSION,kLtF2rCvt,"fcvtms","0,1",1)
/* MOP_vcvtps        fcvtps w,s (for ceil) */
DEFINE_MOP(MOP_vcvtps, {mopdReg32ID,mopdReg32FS},ISCONVERSION,kLtF2rCvt,"fcvtps","0,1",1)
/* MOP_xvcvtps       fcvtps x,d */
DEFINE_MOP(MOP_xvcvtps, {mopdReg64ID,mopdReg64FS},ISCONVERSION,kLtF2rCvt,"fcvtps","0,1",1)

/* MOP_vcvtrd		fcvtzs w,d */
DEFINE_MOP(MOP_vcvtrd, {mopdReg32ID,mopdReg64FS},ISCONVERSION,kLtF2rCvt,"fcvtzs","0,1",1)
/* MOP_xvcvtrd	fcvtzs x,d */
DEFINE_MOP(MOP_xvcvtrd, {mopdReg64ID,mopdReg64FS},ISCONVERSION,kLtF2rCvt,"fcvtzs","0,1",1)
/* MOP_vcvturd	fcvtzu w,d */
DEFINE_MOP(MOP_vcvturd, {mopdReg32ID,mopdReg64FS},ISCONVERSION,kLtF2rCvt,"fcvtzu","0,1",1)
/* MOP_xvcvturd	fcvtzu x,d */
DEFINE_MOP(MOP_xvcvturd, {mopdReg64ID,mopdReg64FS},ISCONVERSION,kLtF2rCvt,"fcvtzu","0,1",1)

/* MOP_vcvtfr		scvtf s,w */
DEFINE_MOP(MOP_vcvtfr, {mopdReg32FD,mopdReg32IS},ISCONVERSION,kLtR2fCvt,"scvtf","0,1",1)
/* MOP_xvcvtfr	scvtf s,x */
DEFINE_MOP(MOP_xvcvtfr, {mopdReg32FD,mopdReg64IS},ISCONVERSION,kLtR2fCvt,"scvtf","0,1",1)
/* MOP_vcvtufr	ucvtf s,w */
DEFINE_MOP(MOP_vcvtufr, {mopdReg32FD,mopdReg32IS},ISCONVERSION,kLtR2fCvt,"ucvtf","0,1",1)
/* MOP_xvcvtufr	ucvtf s,x */
DEFINE_MOP(MOP_xvcvtufr, {mopdReg32FD,mopdReg64IS},ISCONVERSION,kLtR2fCvt,"ucvtf","0,1",1)

/* MOP_vcvtdr		scvtf d,w */
DEFINE_MOP(MOP_vcvtdr, {mopdReg64FD,mopdReg32IS},ISCONVERSION,kLtR2fCvt,"scvtf","0,1",1)
/* MOP_xvcvtdr	scvtf d,x */
DEFINE_MOP(MOP_xvcvtdr, {mopdReg64FD,mopdReg64IS},ISCONVERSION,kLtR2fCvt,"scvtf","0,1",1)
/* MOP_vcvtudr	ucvtf d,w */
DEFINE_MOP(MOP_vcvtudr, {mopdReg64FD,mopdReg32IS},ISCONVERSION,kLtR2fCvt,"ucvtf","0,1",1)
/* MOP_xvcvtudr	ucvtf d,x */
DEFINE_MOP(MOP_xvcvtudr, {mopdReg64FD,mopdReg64IS},ISCONVERSION,kLtR2fCvt,"ucvtf","0,1",1)

/* MOP_xcsel */
DEFINE_MOP(MOP_wcselrrrc, {mopdReg32ID,mopdReg32IS,mopdReg32IS,mopdCond},ISCONDDEF,kLtAlu,"csel","0,1,2,3",1)
DEFINE_MOP(MOP_xcselrrrc, {mopdReg64ID,mopdReg64IS,mopdReg64IS,mopdCond},ISCONDDEF,kLtAlu,"csel","0,1,2,3",1)

/* MOP_xcset -- all conditions minus AL & NV */
DEFINE_MOP(MOP_wcsetrc, {mopdReg32ID,mopdCond},ISCONDSET | ISCONDDEF,kLtAlu,"cset","0,1",1)
DEFINE_MOP(MOP_xcsetrc, {mopdReg64ID,mopdCond},ISCONDSET | ISCONDDEF,kLtAlu,"cset","0,1",1)

/* MOP_xcsinc */
DEFINE_MOP(MOP_wcsincrrrc, {mopdReg32ID,mopdReg32IS,mopdReg32IS,mopdCond},ISCONDDEF,kLtAlu,"csinc","0,1,2,3",1)
DEFINE_MOP(MOP_xcsincrrrc, {mopdReg64ID,mopdReg64IS,mopdReg64IS,mopdCond},ISCONDDEF,kLtAlu,"csinc","0,1,2,3",1)

/* MOP_xcsinv */
DEFINE_MOP(MOP_wcsinvrrrc, {mopdReg32ID,mopdReg32IS,mopdReg32IS,mopdCond},ISCONDDEF,kLtAlu,"csinv","0,1,2,3",1)
DEFINE_MOP(MOP_xcsinvrrrc, {mopdReg64ID,mopdReg64IS,mopdReg64IS,mopdCond},ISCONDDEF,kLtAlu,"csinv","0,1,2,3",1)

/* MOP_xandrrr */
DEFINE_MOP(MOP_xandrrr, {mopdReg64ID,mopdReg64IS,mopdReg64IS},0,kLtAlu,"and","0,1,2",1)
/* MOP_xandrrrs */
DEFINE_MOP(MOP_xandrrrs, {mopdReg64ID,mopdReg64IS,mopdReg64IS,mopdBitShift64},0,kLtAluShift,"and","0,1,2,3",1)
/* MOP_xandrri13 */
DEFINE_MOP(MOP_xandrri13, {mopdReg64ID,mopdReg64IS,mopdImmBm13},0,kLtAlu,"and","0,1,2",1)
/* MOP_wandrrr */
DEFINE_MOP(MOP_wandrrr, {mopdReg32ID,mopdReg32IS,mopdReg32IS},0,kLtAlu,"and","0,1,2",1)
/* MOP_wandrrrs */
DEFINE_MOP(MOP_wandrrrs, {mopdReg32ID,mopdReg32IS,mopdReg32IS,mopdBitShift32},0,kLtAluShift,"and","0,1,2,3",1)
/* MOP_wandrri12 */
DEFINE_MOP(MOP_wandrri12, {mopdReg32ID,mopdReg32IS,mopdImmBm12},0,kLtAlu,"and","0,1,2",1)

/* MOP_xiorrrr */
DEFINE_MOP(MOP_xiorrrr, {mopdReg64ID,mopdReg64IS,mopdReg64IS},0,kLtAlu,"orr","0,1,2",1)
/* MOP_xiorrrrs */
DEFINE_MOP(MOP_xiorrrrs, {mopdReg64ID,mopdReg64IS,mopdReg64IS,mopdBitShift64},0,kLtAlu,"orr","0,1,2,3",1)
/* MOP_xiorrri13 */
DEFINE_MOP(MOP_xiorrri13, {mopdReg64ID,mopdReg64IS,mopdImmBm13},0,kLtAlu,"orr","0,1,2",1)
/* MOP_wiorrrr */
DEFINE_MOP(MOP_wiorrrr, {mopdReg32ID,mopdReg32IS,mopdReg32IS},0,kLtAlu,"orr","0,1,2",1)
/* MOP_wiorrrrs */
DEFINE_MOP(MOP_wiorrrrs, {mopdReg32ID,mopdReg32IS,mopdReg32IS,mopdBitShift32},0,kLtAlu,"orr","0,1,2,3",1)
/* MOP_wiorrri12 */
DEFINE_MOP(MOP_wiorrri12, {mopdReg32ID,mopdReg32IS,mopdImmBm12},0,kLtAlu,"orr","0,1,2",1)

/* MOP_xiorri13r */
DEFINE_MOP(MOP_xiorri13r, {mopdReg64ID,mopdImmBm13,mopdReg64IS},0,kLtAlu,"orr","0,2,1",1)
/* MOP_wiorri12r */
DEFINE_MOP(MOP_wiorri12r, {mopdReg32ID,mopdImmBm12,mopdReg32IS},0,kLtAlu,"orr","0,2,1",1)

/* MOP_xeorrrr */
DEFINE_MOP(MOP_xeorrrr, {mopdReg64ID,mopdReg64IS,mopdReg64IS},0,kLtAlu,"eor","0,1,2",1)
/* MOP_xeorrrrs */
DEFINE_MOP(MOP_xeorrrrs, {mopdReg64ID,mopdReg64IS,mopdReg64IS,mopdBitShift64},0,kLtAlu,"eor","0,1,2,3",1)
/* MOP_xeorrri13 */
DEFINE_MOP(MOP_xeorrri13, {mopdReg64ID,mopdReg64IS,mopdImmBm13},0,kLtAlu,"eor","0,1,2",1)
/* MOP_weorrrr */
DEFINE_MOP(MOP_weorrrr, {mopdReg32ID,mopdReg32IS,mopdReg32IS},0,kLtAlu,"eor","0,1,2",1)
/* MOP_weorrrrs */
DEFINE_MOP(MOP_weorrrrs, {mopdReg32ID,mopdReg32IS,mopdReg32IS,mopdBitShift32},0,kLtAlu,"eor","0,1,2,3",1)
/* MOP_weorrri12 */
DEFINE_MOP(MOP_weorrri12, {mopdReg32ID,mopdReg32IS,mopdImmBm12},0,kLtAlu,"eor","0,1,2",1)

/* MOP_xnotrr */
DEFINE_MOP(MOP_xnotrr, {mopdReg64ID,mopdReg64IS},0,kLtAlu,"mvn","0,1",1)
/* MOP_wnotrr */
DEFINE_MOP(MOP_wnotrr, {mopdReg32ID,mopdReg32IS},0,kLtAlu,"mvn","0,1",1)

/* MOP_wfmaxrrr */
DEFINE_MOP(MOP_wfmaxrrr, {mopdReg32FD,mopdReg32FS,mopdReg32FS},0,kLtFpalu,"fmax","0,1,2",1)
/* MOP_xfmaxrrr */
DEFINE_MOP(MOP_xfmaxrrr, {mopdReg64FD,mopdReg64FS,mopdReg64FS},0,kLtFpalu,"fmax","0,1,2",1)
/* MOP_wfminrrr */
DEFINE_MOP(MOP_wfminrrr, {mopdReg32FD,mopdReg32FS,mopdReg32FS},0,kLtFpalu,"fmin","0,1,2",1)
/* MOP_xfminrrr */
DEFINE_MOP(MOP_xfminrrr, {mopdReg64FD,mopdReg64FS,mopdReg64FS},0,kLtFpalu,"fmin","0,1,2",1)

/* MOP_wsdivrrr */
DEFINE_MOP(MOP_wsdivrrr, {mopdReg32ID,mopdReg32IS,mopdReg32IS},CANTHROW,kLtDiv,"sdiv","0,1,2",1)
/* MOP_xsdivrrr */
DEFINE_MOP(MOP_xsdivrrr, {mopdReg64ID,mopdReg64IS,mopdReg64IS},CANTHROW,kLtDiv,"sdiv","0,1,2",1)
/* MOP_wudivrrr */
DEFINE_MOP(MOP_wudivrrr, {mopdReg32ID,mopdReg32IS,mopdReg32IS},CANTHROW,kLtDiv,"udiv","0,1,2",1)
/* MOP_xudivrrr */
DEFINE_MOP(MOP_xudivrrr, {mopdReg64ID,mopdReg64IS,mopdReg64IS},CANTHROW,kLtDiv,"udiv","0,1,2",1)

/* MOP_wmsubrrrr */
DEFINE_MOP(MOP_wmsubrrrr, {mopdReg32ID,mopdReg32IS,mopdReg32IS,mopdReg32IS},0,kLtMul,"msub","0,1,2,3",1)
/* MOP_xmsubrrrr */
DEFINE_MOP(MOP_xmsubrrrr, {mopdReg64ID,mopdReg64IS,mopdReg64IS,mopdReg64IS},0,kLtMul,"msub","0,1,2,3",1)

/* MOP_wmnegrrr */
DEFINE_MOP(MOP_wmnegrrr, {mopdReg32ID,mopdReg32IS,mopdReg32IS},0,kLtMul,"mneg","0,1,2",1)
/* MOP_xmnegrrr */
DEFINE_MOP(MOP_xmnegrrr, {mopdReg64ID,mopdReg64IS,mopdReg64IS},0,kLtMul,"mneg","0,1,2",1)

/* MPO_wubfxrri5i5 */
DEFINE_MOP(MOP_wubfxrri5i5, {mopdReg32ID,mopdReg32IS,mopdImm5,mopdImm5},0,kLtAluShift,"ubfx","0,1,2,3",1)
/* MPO_xubfxrri6i6 */
DEFINE_MOP(MOP_xubfxrri6i6, {mopdReg64ID,mopdReg64IS,mopdImm6,mopdImm6},0,kLtAluShift,"ubfx","0,1,2,3",1)

/* MPO_wsbfxrri5i5 -- Signed Bitfield Extract */
DEFINE_MOP(MOP_wsbfxrri5i5, {mopdReg32ID,mopdReg32IS,mopdImm5,mopdImm5},0,kLtAluShift,"sbfx","0,1,2,3",1)
/* MPO_xsbfxrri6i6 */
DEFINE_MOP(MOP_xsbfxrri6i6, {mopdReg64ID,mopdReg64IS,mopdImm6,mopdImm6},0,kLtAluShift,"sbfx","0,1,2,3",1)

/* MPO_wubfizrri5i5 -- Unsigned Bitfield Insert in Zero */
DEFINE_MOP(MOP_wubfizrri5i5, {mopdReg32IDS,mopdReg32IS,mopdImm5,mopdImm5},ISMOVE|ISPARTDEF,kLtAluShift,"ubfiz","0,1,2,3",1)
/* MPO_xubfizrri6i6 */
DEFINE_MOP(MOP_xubfizrri6i6, {mopdReg64IDS,mopdReg64IS,mopdImm6,mopdImm6},ISMOVE|ISPARTDEF,kLtAluShift,"ubfiz","0,1,2,3",1)

/* MPO_wbfirri5i5 -- Bitfield Insert */
DEFINE_MOP(MPO_wbfirri5i5, {mopdReg32IDS,mopdReg32IS,mopdImm5,mopdImm5},ISMOVE|ISPARTDEF,kLtAluShift,"bfi","0,1,2,3",1)
/* MPO_xbfirri6i6 */
DEFINE_MOP(MPO_xbfirri6i6, {mopdReg64IDS,mopdReg64IS,mopdImm6,mopdImm6},ISMOVE|ISPARTDEF,kLtAluShift,"bfi","0,1,2,3",1)


/* MOP_xlslrri6,--- Logical Shift Left */
DEFINE_MOP(MOP_xlslrri6, {mopdReg64ID,mopdReg64IS,mopdImm6},0,kLtAluShift,"lsl","0,1,2",1)
/* MOP_wlslrri5 */
DEFINE_MOP(MOP_wlslrri5, {mopdReg32ID,mopdReg32IS,mopdImm8},0,kLtAluShift,"lsl","0,1,2",1)
/* MOP_xasrrri6, */
DEFINE_MOP(MOP_xasrrri6, {mopdReg64ID,mopdReg64IS,mopdImm6},0,kLtAluShift,"asr","0,1,2",1)
/* MOP_wasrrri5 */
DEFINE_MOP(MOP_wasrrri5, {mopdReg32ID,mopdReg32IS,mopdImm8},0,kLtAluShift,"asr","0,1,2",1)
/* MOP_xlsrrri6, */
DEFINE_MOP(MOP_xlsrrri6, {mopdReg64ID,mopdReg64IS,mopdImm6},0,kLtAluShift,"lsr","0,1,2",1)
/* MOP_wlsrrri5 */
DEFINE_MOP(MOP_wlsrrri5, {mopdReg32ID,mopdReg32IS,mopdImm8},0,kLtAluShift,"lsr","0,1,2",1)
/* MOP_xlslrrr, */
DEFINE_MOP(MOP_xlslrrr, {mopdReg64ID,mopdReg64IS,mopdReg64IS},0,kLtAluShiftReg,"lsl","0,1,2",1)
/* MOP_wlslrrr */
DEFINE_MOP(MOP_wlslrrr, {mopdReg32ID,mopdReg32IS,mopdReg32IS},0,kLtAluShiftReg,"lsl","0,1,2",1)
/* MOP_xasrrrr, */
DEFINE_MOP(MOP_xasrrrr, {mopdReg64ID,mopdReg64IS,mopdReg64IS},0,kLtAluShiftReg,"asr","0,1,2",1)
/* MOP_wasrrrr */
DEFINE_MOP(MOP_wasrrrr, {mopdReg32ID,mopdReg32IS,mopdReg32IS},0,kLtAluShiftReg,"asr","0,1,2",1)
/* MOP_xlsrrrr, */
DEFINE_MOP(MOP_xlsrrrr, {mopdReg64ID,mopdReg64IS,mopdReg64IS},0,kLtAluShiftReg,"lsr","0,1,2",1)
/* MOP_wlsrrrr */
DEFINE_MOP(MOP_wlsrrrr, {mopdReg32ID,mopdReg32IS,mopdReg32IS},0,kLtAluShiftReg,"lsr","0,1,2",1)
/* MOP_wtstri32 */
DEFINE_MOP(MOP_wtstri32, {mopdRegCCD,mopdReg32ID,mopdImm32},0,kLtAlu,"tst","1,2",1)
/* MOP_xtstri64 */
DEFINE_MOP(MOP_xtstri64, {mopdRegCCD,mopdReg64ID,mopdImm64},0,kLtAlu,"tst","1,2",1)
/* MOP_wtstrr */
DEFINE_MOP(MOP_wtstrr, {mopdRegCCD,mopdReg32ID,mopdReg32IS},0,kLtAlu,"tst","1,2",1)
/* MOP_xtstrr */
DEFINE_MOP(MOP_xtstrr, {mopdRegCCD,mopdReg64ID,mopdReg64IS},0,kLtAlu,"tst","1,2",1)

/* MOP_wsfmovri imm8->s */
DEFINE_MOP(MOP_wsfmovri, {mopdReg32FD,mopdImm8},ISMOVE,kLtFconst,"fmov","0,1",1)
/* MOP_xdfmovri imm8->d */
DEFINE_MOP(MOP_xdfmovri, {mopdReg64FD,mopdImm8},ISMOVE,kLtFconst,"fmov","0,1",1)

/* MOP_xcsneg -- Conditional Select Negation */
DEFINE_MOP(MOP_wcsnegrrrc, {mopdReg32ID,mopdReg32IS,mopdReg32IS,mopdCond},ISCONDDEF,kLtAlu,"csneg","0,1,2,3",1)
DEFINE_MOP(MOP_xcsnegrrrc, {mopdReg64ID,mopdReg64IS,mopdReg64IS,mopdCond},ISCONDDEF,kLtAlu,"csneg","0,1,2,3",1)
DEFINE_MOP(MOP_wcnegrrrc, {mopdReg32ID,mopdReg32IS,mopdCond},ISCONDDEF,kLtAlu,"cneg","0,1,2",1)
DEFINE_MOP(MOP_xcnegrrrc, {mopdReg64ID,mopdReg64IS,mopdCond},ISCONDDEF,kLtAlu,"cneg","0,1,2",1)

/* MOP_sabsrr */
DEFINE_MOP(MOP_sabsrr, {mopdReg32FD,mopdReg32FS},0,kLtFpalu,"fabs","0,1",1)
/* MOP_dabsrr */
DEFINE_MOP(MOP_dabsrr, {mopdReg64FD,mopdReg64FS},0,kLtFpalu,"fabs","0,1",1)

/* MOP_winegrr */
DEFINE_MOP(MOP_winegrr, {mopdReg32ID,mopdReg32IS},0,kLtAlu,"neg","0,1",1)
/* MOP_winegrre */
DEFINE_MOP(MOP_winegrrs, {mopdReg32ID,mopdReg32IS,mopdBitShift32},0,kLtAlu,"neg","0,1,2",1)
/* neg MOP_xinegrr */
DEFINE_MOP(MOP_xinegrr, {mopdReg64ID,mopdReg64IS},0,kLtAlu,"neg","0,1",1)
/* neg MOP_xinegrrs */
DEFINE_MOP(MOP_xinegrrs, {mopdReg64ID,mopdReg64IS,mopdBitShift64},0,kLtAlu,"neg","0,1,2",1)
/* neg f32 */
DEFINE_MOP(MOP_wfnegrr, {mopdReg32FD,mopdReg32FS},0,kLtFpalu,"fneg","0,1",1)
/* neg f64 */
DEFINE_MOP(MOP_xfnegrr, {mopdReg64FD,mopdReg64FS},0,kLtFpalu,"fneg","0,1",1)

/* MOP_sdivrrr */
DEFINE_MOP(MOP_sdivrrr, {mopdReg32FD,mopdReg32FS,mopdReg32FS},CANTHROW,kLtAdvsimdDivS,"fdiv","0,1,2",1)
/* MOP_ddivrrr */
DEFINE_MOP(MOP_ddivrrr, {mopdReg64FD,mopdReg64FS,mopdReg64FS},CANTHROW,kLtAdvsimdDivD,"fdiv","0,1,2",1)

/* MOP_smadd */
DEFINE_MOP(MOP_smadd, {mopdReg32FD,mopdReg32FS,mopdReg32FS,mopdReg32FS},CANTHROW,kLtFpmul,"fmadd","0,1,2,3",1)
/* MOP_dmadd */
DEFINE_MOP(MOP_dmadd, {mopdReg64FD,mopdReg64FS,mopdReg64FS,mopdReg64FS},CANTHROW,kLtFpmul,"fmadd","0,1,2,3",1)

/* MOP_smsub */
DEFINE_MOP(MOP_smsub, {mopdReg32FD,mopdReg32FS,mopdReg32FS,mopdReg32FS},CANTHROW,kLtFpmul,"fmsub","0,1,2,3",1)
/* MOP_dmsub */
DEFINE_MOP(MOP_dmsub, {mopdReg64FD,mopdReg64FS,mopdReg64FS,mopdReg64FS},CANTHROW,kLtFpmul,"fmsub","0,1,2,3",1)

/* MOP_snmul */
DEFINE_MOP(MOP_snmul, {mopdReg32FD,mopdReg32FS,mopdReg32FS},CANTHROW,kLtFpmul,"fnmul","0,1,2",1)
/* MOP_dnmul */
DEFINE_MOP(MOP_dnmul, {mopdReg64FD,mopdReg64FS,mopdReg64FS},CANTHROW,kLtFpmul,"fnmul","0,1,2",1)

/* MOP_hcselrrrc --- Floating-point Conditional Select */
DEFINE_MOP(MOP_hcselrrrc, {mopdReg16FD,mopdReg16FS,mopdReg16FS,mopdCond},ISCONDDEF,kLtFpalu,"fcsel","0,1,2,3",1)
/* MOP_scselrrrc */
DEFINE_MOP(MOP_scselrrrc, {mopdReg32FD,mopdReg32FS,mopdReg32FS,mopdCond},ISCONDDEF,kLtFpalu,"fcsel","0,1,2,3",1)
/* MOP_dcselrrrc */
DEFINE_MOP(MOP_dcselrrrc, {mopdReg64FD,mopdReg64FS,mopdReg64FS,mopdCond},ISCONDDEF,kLtFpalu,"fcsel","0,1,2,3",1)

/* MOP_wldli -- load 32-bit literal */
DEFINE_MOP(MOP_wldli, {mopdReg32ID,mopdLabel},ISLOAD|CANTHROW,kLtLoad1,"ldr","0,1",1)
/* MOP_xldli -- load 64-bit literal */
DEFINE_MOP(MOP_xldli, {mopdReg64ID,mopdLabel},ISLOAD|CANTHROW,kLtLoad2,"ldr","0,1",1)
/* MOP_sldli -- load 32-bit literal */
DEFINE_MOP(MOP_sldli, {mopdReg32FD,mopdLabel},ISLOAD|CANTHROW,kLtLoad1,"ldr","0,1",1)
/* MOP_dldli -- load 64-bit literal */
DEFINE_MOP(MOP_dldli, {mopdReg64FD,mopdLabel},ISLOAD|CANTHROW,kLtLoad2,"ldr","0,1",1)

/* AArch64 branches/calls */
/* MOP_xbl -- branch with link (call); this is a special definition */
DEFINE_MOP(MOP_xbl,  {mopdFuncName,mopdLISTS},ISCALL|CANTHROW,kLtBranch,"bl","0",1)
/* MOP_xblr -- branch with link (call) to register; this is a special definition */
DEFINE_MOP(MOP_xblr, {mopdReg64IS,mopdLISTS},ISCALL|CANTHROW,kLtBranch,"blr","0",1)

/* Inline asm */
/* Number of instructions generated by inline asm is arbitrary.  Use a large number here. */
/* asm string, output list, clobber list, input list, output constraint, input constraint, out reg prefix, in reg prefix */
DEFINE_MOP(MOP_asm, {mopdSTRING,mopdLISTS,mopdLISTS,mopdLISTS,mopdLISTS,mopdLISTS,mopdLISTS,mopdLISTS},ISCALL|CANTHROW|HASACQUIRE|HASRELEASE,kLtUndef,"asm","0,1,2,3",100)

/* AARCH64 LOADS */
/* MOP_wldrsb --- Load Register Signed Byte */
DEFINE_MOP(MOP_wldrsb, {mopdReg32ID,mopdMem8S},ISLOAD|CANTHROW,kLtLoad1,"ldrsb","0,1",1)
/* MOP_xldrsb --- Load Register Signed Byte */
DEFINE_MOP(MOP_xldrsb, {mopdReg64ID,mopdMem8S},ISLOAD|CANTHROW,kLtLoad1,"ldrsb","0,1",1)
/* MOP_wldrb */
DEFINE_MOP(MOP_wldrb, {mopdReg32ID,mopdMem8S},ISLOAD|CANTHROW,kLtLoad1,"ldrb","0,1",1)
/* MOP_wldrsh  --- Load Register Signed Halfword */
DEFINE_MOP(MOP_wldrsh, {mopdReg32ID,mopdMem16S},ISLOAD|CANTHROW,kLtLoad1,"ldrsh","0,1",1)
/* MOP_xldrsh  --- Load Register Signed Halfword */
DEFINE_MOP(MOP_xldrsh, {mopdReg64ID,mopdMem16S},ISLOAD|CANTHROW,kLtLoad1,"ldrsh","0,1",1)
/* MOP_wldrh */
DEFINE_MOP(MOP_wldrh, {mopdReg32ID, mopdMem16S},ISLOAD|CANTHROW,kLtLoad1,"ldrh","0,1",1)
/* MOP_wldr */
DEFINE_MOP(MOP_wldr, {mopdReg32ID,mopdMem32S},ISLOAD|CANTHROW,kLtLoad1,"ldr","0,1",1)
/* MOP_xldr */
DEFINE_MOP(MOP_xldr, {mopdReg64ID,mopdMem64S},ISLOAD|CANTHROW,kLtLoad2,"ldr","0,1",1)
/* MOP_bldr */
DEFINE_MOP(MOP_bldr, {mopdReg8FD,mopdMem8S},ISLOAD|CANTHROW,kLtFLoad64,"ldr","0,1",1)
/* MOP_hldr */
DEFINE_MOP(MOP_hldr, {mopdReg16FD,mopdMem16S},ISLOAD|CANTHROW,kLtFLoad64,"ldr","0,1",1)
/* MOP_sldr */
DEFINE_MOP(MOP_sldr, {mopdReg32FD,mopdMem32S},ISLOAD|CANTHROW,kLtFLoadMany,"ldr","0,1",1)
/* MOP_dldr */
DEFINE_MOP(MOP_dldr, {mopdReg64FD,mopdMem64S},ISLOAD|CANTHROW,kLtFLoadMany,"ldr","0,1",1)
/* MOP_qldr */
DEFINE_MOP(MOP_qldr, {mopdReg128VD,mopdMem128S},ISLOAD|CANTHROW,kLtFLoadMany,"ldr","0,1",1)

/* AArch64 LDP/LDPSW */
/* MOP_wldp */
DEFINE_MOP(MOP_wldp, {mopdReg32ID,mopdReg32ID,mopdMem32PS},ISLOAD|ISLOADPAIR|CANTHROW,kLtLoad2,"ldp","0,1,2",1)
/* MOP_xldp */
DEFINE_MOP(MOP_xldp, {mopdReg64ID,mopdReg64ID,mopdMem64PS},ISLOAD|ISLOADPAIR|CANTHROW,kLtLoad3plus,"ldp","0,1,2",1)
/* MOP_xldpsw */
DEFINE_MOP(MOP_xldpsw, {mopdReg64ID,mopdReg64ID,mopdMem32PS},ISLOAD|ISLOADPAIR|CANTHROW,kLtLoad2,"ldpsw","0,1,2",1)
/* MOP_sldp */
DEFINE_MOP(MOP_sldp, {mopdReg32FD,mopdReg32FD,mopdMem32PS},ISLOAD|ISLOADPAIR|CANTHROW,kLtFLoad64,"ldp","0,1,2",1)
/* MOP_dldp */
DEFINE_MOP(MOP_dldp, {mopdReg64FD,mopdReg64FD,mopdMem64PS},ISLOAD|ISLOADPAIR|CANTHROW,kLtFLoadMany,"ldp","0,1,2",1)

/* AARCH64 Load with Acquire semantics */
/* MOP_wldarb */
DEFINE_MOP(MOP_wldarb, {mopdReg32ID,mopdMem8S},ISLOAD|HASACQUIRE|CANTHROW,kLtLoad1,"ldarb","0,1",1)
/* MOP_wldarh */
DEFINE_MOP(MOP_wldarh, {mopdReg32ID, mopdMem16S},ISLOAD|HASACQUIRE|CANTHROW,kLtLoad1,"ldarh","0,1",1)
/* MOP_wldar */
DEFINE_MOP(MOP_wldar, {mopdReg32ID,mopdMem32S},ISLOAD|HASACQUIRE|CANTHROW,kLtLoad1,"ldar","0,1",1)
/* MOP_xldar */
DEFINE_MOP(MOP_xldar, {mopdReg64ID,mopdMem64S},ISLOAD|HASACQUIRE|CANTHROW,kLtLoad1,"ldar","0,1",1)

/* MOP_wmovkri16 */
DEFINE_MOP(MOP_wmovkri16, {mopdReg32IDS,mopdImm16,mopdLSL4},ISMOVE|ISPARTDEF,kLtShift,"movk","0,1,2",1)
/* MOP_xmovkri16 */
DEFINE_MOP(MOP_xmovkri16, {mopdReg64IDS,mopdImm16,mopdLSL6},ISMOVE|ISPARTDEF,kLtShift,"movk","0,1,2",1)

/* MOP_wmovzri16 */
DEFINE_MOP(MOP_wmovzri16, {mopdReg32ID,mopdImm16,mopdLSL4},ISMOVE|ISPARTDEF,kLtShift,"movz","0,1,2",1)
/* MOP_xmovzri16 */
DEFINE_MOP(MOP_xmovzri16, {mopdReg64ID,mopdImm16,mopdLSL6},ISMOVE|ISPARTDEF,kLtShift,"movz","0,1,2",1)

/* MOP_wmovnri16 */
DEFINE_MOP(MOP_wmovnri16, {mopdReg32ID,mopdImm16,mopdLSL4},ISMOVE|ISPARTDEF,kLtShift,"movn","0,1,2",1)
/* MOP_xmovnri16 */
DEFINE_MOP(MOP_xmovnri16, {mopdReg64ID,mopdImm16,mopdLSL6},ISMOVE|ISPARTDEF,kLtShift,"movn","0,1,2",1)

/* AARCH64 Load exclusive with/without acquire semantics */
DEFINE_MOP(MOP_wldxrb, {mopdReg32ID,mopdMem8S, },ISLOAD|ISATOMIC|CANTHROW,kLtLoad1,"ldxrb","0,1",1)
DEFINE_MOP(MOP_wldxrh, {mopdReg32ID,mopdMem16S},ISLOAD|ISATOMIC|CANTHROW,kLtLoad1,"ldxrh","0,1",1)
DEFINE_MOP(MOP_wldxr,  {mopdReg32ID,mopdMem32S},ISLOAD|ISATOMIC|CANTHROW,kLtLoad1,"ldxr","0,1",1)
DEFINE_MOP(MOP_xldxr,  {mopdReg64ID,mopdMem64S},ISLOAD|ISATOMIC|CANTHROW,kLtLoad1,"ldxr","0,1",1)

DEFINE_MOP(MOP_wldaxrb,{mopdReg32ID,mopdMem8S, },ISLOAD|ISATOMIC|HASACQUIRE|CANTHROW,kLtLoad1,"ldaxrb","0,1",1)
DEFINE_MOP(MOP_wldaxrh,{mopdReg32ID,mopdMem16S},ISLOAD|ISATOMIC|HASACQUIRE|CANTHROW,kLtLoad1,"ldaxrh","0,1",1)
DEFINE_MOP(MOP_wldaxr, {mopdReg32ID,mopdMem32S},ISLOAD|ISATOMIC|HASACQUIRE|CANTHROW,kLtLoad1,"ldaxr","0,1",1)
DEFINE_MOP(MOP_xldaxr, {mopdReg64ID,mopdMem64S},ISLOAD|ISATOMIC|HASACQUIRE|CANTHROW,kLtLoad1,"ldaxr","0,1",1)

DEFINE_MOP(MOP_wldaxp, {mopdReg32ID,mopdReg32ID,mopdMem32S},ISLOAD|ISLOADPAIR|ISATOMIC|HASACQUIRE|CANTHROW,kLtLoad1,"ldaxp","0,1,2",1)
DEFINE_MOP(MOP_xldaxp, {mopdReg64ID,mopdReg64ID,mopdMem64S},ISLOAD|ISLOADPAIR|ISATOMIC|HASACQUIRE|CANTHROW,kLtLoad1,"ldaxp","0,1,2",1)

/* MOP_vsqrts */
DEFINE_MOP(MOP_vsqrts, {mopdReg32FD,mopdReg32FS},CANTHROW,kLtAdvsimdDivS,"fsqrt","0,1",1)
/* MOP_vsqrtd */
DEFINE_MOP(MOP_vsqrtd, {mopdReg64FD,mopdReg64FS},CANTHROW,kLtAdvsimdDivD,"fsqrt","0,1",1)


/* # Non Definitions */
/* # As far as register allocation is concerned, the instructions below are non-definitions. */

/* MOP_beq */
DEFINE_MOP(MOP_beq, {mopdRegCCS,mopdLabel},ISCONDBRANCH,kLtBranch,"beq","1",1)
/* MOP_bne */
DEFINE_MOP(MOP_bne, {mopdRegCCS,mopdLabel},ISCONDBRANCH,kLtBranch,"bne","1",1)
/* MOP_blt */
DEFINE_MOP(MOP_blt, {mopdRegCCS,mopdLabel},ISCONDBRANCH,kLtBranch,"blt","1",1)
/* MOP_ble */
DEFINE_MOP(MOP_ble, {mopdRegCCS,mopdLabel},ISCONDBRANCH,kLtBranch,"ble","1",1)
/* MOP_bgt */
DEFINE_MOP(MOP_bgt, {mopdRegCCS,mopdLabel},ISCONDBRANCH,kLtBranch,"bgt","1",1)
/* MOP_bge */
DEFINE_MOP(MOP_bge, {mopdRegCCS,mopdLabel},ISCONDBRANCH,kLtBranch,"bge","1",1)
/* MOP_blo equal to MOP_blt for unsigned comparison */
DEFINE_MOP(MOP_blo, {mopdRegCCS,mopdLabel},ISCONDBRANCH,kLtBranch,"blo","1",1)
/* MOP_bls equal to MOP_bls for unsigned comparison */
DEFINE_MOP(MOP_bls, {mopdRegCCS,mopdLabel},ISCONDBRANCH,kLtBranch,"bls","1",1)
/* MOP_bhs equal to MOP_bge for unsigned comparison */
DEFINE_MOP(MOP_bhs, {mopdRegCCS,mopdLabel},ISCONDBRANCH,kLtBranch,"bhs","1",1)
/* MOP_bhi equal to MOP_bgt for float comparison */
DEFINE_MOP(MOP_bhi, {mopdRegCCS,mopdLabel},ISCONDBRANCH,kLtBranch,"bhi","1",1)
/* MOP_bpl equal to MOP_bge for float comparison */
DEFINE_MOP(MOP_bpl, {mopdRegCCS,mopdLabel},ISCONDBRANCH,kLtBranch,"bpl","1",1)
DEFINE_MOP(MOP_bmi, {mopdRegCCS,mopdLabel},ISCONDBRANCH,kLtBranch,"bmi","1",1)
DEFINE_MOP(MOP_bvc, {mopdRegCCS,mopdLabel},ISCONDBRANCH,kLtBranch,"bvc","1",1)
DEFINE_MOP(MOP_bvs, {mopdRegCCS,mopdLabel},ISCONDBRANCH,kLtBranch,"bvs","1",1)

/* MOP_xret		AARCH64 Specific */
DEFINE_MOP(MOP_xret, {},CANTHROW,kLtBranch,"ret","",1)

/* AARCH64 Floating-Point COMPARES signaling versions */
/* MOP_hcmperi -- AArch64 cmp has no dest operand */
DEFINE_MOP(MOP_hcmperi, {mopdRegCCD, mopdReg16FS,mopdFPZeroImm8},0,kLtFpalu,"fcmpe","1,2",1)
/* MOP_hcmperr -- register, shifted register, AArch64 cmp has no dest operand */
DEFINE_MOP(MOP_hcmperr, {mopdRegCCD, mopdReg16FS,mopdReg16FS},0,kLtFpalu,"fcmpe","1,2",1)

/* MOP_scmperi -- AArch64 cmp has no dest operand */
DEFINE_MOP(MOP_scmperi, {mopdRegCCD, mopdReg32FS,mopdFPZeroImm8},0,kLtFpalu,"fcmpe","1,2",1)
/* MOP_scmperr */
DEFINE_MOP(MOP_scmperr, {mopdRegCCD, mopdReg32FS,mopdReg32FS},0,kLtFpalu,"fcmpe","1,2",1)

/* MOP_dcmperi -- AArch64 cmp has no dest operand */
DEFINE_MOP(MOP_dcmperi, {mopdRegCCD, mopdReg64FS,mopdFPZeroImm8},0,kLtFpalu,"fcmpe","1,2",1)
/* MOP_dcmperr */
DEFINE_MOP(MOP_dcmperr, {mopdRegCCD, mopdReg64FS,mopdReg64FS},0,kLtFpalu,"fcmpe","1,2",1)

/* AARCH64 Floating-Point COMPARES non-signaling (quiet) versions */
/* MOP_hcmpqri -- AArch64 cmp has no dest operand */
DEFINE_MOP(MOP_hcmpqri, {mopdRegCCD, mopdReg16FS,mopdFPZeroImm8},0,kLtFpalu,"fcmp","1,2",1)
/* MOP_hcmpqrr -- register, shifted register, AArch64 cmp has no dest operand */
DEFINE_MOP(MOP_hcmpqrr, {mopdRegCCD, mopdReg16FS,mopdReg16FS},0,kLtFpalu,"fcmp","1,2",1)

/* MOP_scmpqri -- AArch64 cmp has no dest operand */
DEFINE_MOP(MOP_scmpqri, {mopdRegCCD, mopdReg32FS,mopdFPZeroImm8},0,kLtFpalu,"fcmp","1,2",1)
/* MOP_scmpqrr */
DEFINE_MOP(MOP_scmpqrr, {mopdRegCCD, mopdReg32FS,mopdReg32FS},0,kLtFpalu,"fcmp","1,2",1)

/* MOP_dcmpqri -- AArch64 cmp has no dest operand */
DEFINE_MOP(MOP_dcmpqri, {mopdRegCCD, mopdReg64FS,mopdFPZeroImm8},0,kLtFpalu,"fcmp","1,2",1)
/* MOP_dcmpqrr */
DEFINE_MOP(MOP_dcmpqrr, {mopdRegCCD, mopdReg64FS,mopdReg64FS},0,kLtFpalu,"fcmp","1,2",1)

/* AARCH64 Integer COMPARES */
/* MOP_wcmpri -- AArch64 cmp has no dest operand */
DEFINE_MOP(MOP_wcmpri, {mopdRegCCD, mopdReg32IS,mopdImm12},0,kLtAlu,"cmp","1,2",1)
/* MOP_wcmprr -- register, shifted register, AArch64 cmp has no dest operand */
DEFINE_MOP(MOP_wcmprr, {mopdRegCCD, mopdReg32IS,mopdReg32IS},0,kLtAlu,"cmp","1,2",1)
/* MOP_wcmprrs -- register, shifted register, AArch64 cmp has no dest operand */
DEFINE_MOP(MOP_wcmprrs, {mopdRegCCD, mopdReg32IS,mopdReg32IS,mopdBitShift32},0,kLtAlu,"cmp","1,2,3",1)
/* MOP_wwcmprre -- register, shifted register, AArch64 cmp has no dest operand */
DEFINE_MOP(MOP_wwcmprre, {mopdRegCCD, mopdReg32IS,mopdReg32IS,mopdExtendShift64},0,kLtAlu,"cmp","1,2,3",1)
/* MOP_xcmpri -- AArch64 cmp has no dest operand */
DEFINE_MOP(MOP_xcmpri, {mopdRegCCD, mopdReg64IS,mopdImm16},0,kLtAlu,"cmp","1,2",1)
/* MOP_xcmprr -- register, shifted register, AArch64 cmp has no dest operand */
DEFINE_MOP(MOP_xcmprr, {mopdRegCCD, mopdReg64IS,mopdReg64IS},0,kLtAlu,"cmp","1,2",1)
/* MOP_xcmprrs -- register, shifted register, AArch64 cmp has no dest operand */
DEFINE_MOP(MOP_xcmprrs, {mopdRegCCD, mopdReg64IS,mopdReg64IS,mopdBitShift64},0,kLtAlu,"cmp","1,2,3",1)
/* MOP_xwcmprre -- register, shifted register, AArch64 cmp has no dest operand */
DEFINE_MOP(MOP_xwcmprre, {mopdRegCCD, mopdReg64IS,mopdReg32IS,mopdExtendShift64},0,kLtAlu,"cmp","1,2,3",1)

/* MOP_wccmpriic -- AArch64 cmp has no dest operand */
DEFINE_MOP(MOP_wccmpriic, {mopdRegCCD, mopdReg32IS,mopdImm5,mopdImm4,mopdCond},0,kLtAlu,"ccmp","1,2,3,4",1)
/* MOP_wccmprric -- register, shifted register, AArch64 cmp has no dest operand */
DEFINE_MOP(MOP_wccmprric, {mopdRegCCD, mopdReg32IS,mopdReg32IS,mopdImm4,mopdCond},0,kLtAlu,"ccmp","1,2,3,4",1)
/* MOP_xccmpriic -- AArch64 cmp has no dest operand */
DEFINE_MOP(MOP_xccmpriic, {mopdRegCCD, mopdReg64IS,mopdImm5,mopdImm4,mopdCond},0,kLtAlu,"ccmp","1,2,3,4",1)
/* MOP_xccmprric -- register, shifted register, AArch64 cmp has no dest operand */
DEFINE_MOP(MOP_xccmprric, {mopdRegCCD, mopdReg64IS,mopdReg64IS,mopdImm4,mopdCond},0,kLtAlu,"ccmp","1,2,3,4",1)

/* MOP_wcmnri -- AArch64 cmp has no dest operand */
DEFINE_MOP(MOP_wcmnri, {mopdRegCCD, mopdReg32IS,mopdImm12},0,kLtAlu,"cmn","1,2",1)
/* MOP_wcmnrr -- register, shifted register, AArch64 cmp has no dest operand */
DEFINE_MOP(MOP_wcmnrr, {mopdRegCCD, mopdReg32IS,mopdReg32IS},0,kLtAlu,"cmn","1,2",1)
/* MOP_wcmnrrs -- register, shifted register, AArch64 cmp has no dest operand */
DEFINE_MOP(MOP_wcmnrrs, {mopdRegCCD, mopdReg32IS,mopdReg32IS,mopdBitShift32},0,kLtAlu,"cmn","1,2,3",1)
/* MOP_wwcmnrre -- register, shifted register, AArch64 cmp has no dest operand */
DEFINE_MOP(MOP_wwcmnrre, {mopdRegCCD, mopdReg32IS,mopdReg32IS,mopdExtendShift64},0,kLtAlu,"cmn","1,2,3",1)
/* MOP_xcmnri -- AArch64 cmp has no dest operand */
DEFINE_MOP(MOP_xcmnri, {mopdRegCCD, mopdReg64IS,mopdImm16},0,kLtAlu,"cmn","1,2",1)
/* MOP_xcmnrr -- register, shifted register, AArch64 cmp has no dest operand */
DEFINE_MOP(MOP_xcmnrr, {mopdRegCCD, mopdReg64IS,mopdReg64IS},0,kLtAlu,"cmn","1,2",1)
/* MOP_xcmnrrs -- register, shifted register, AArch64 cmp has no dest operand */
DEFINE_MOP(MOP_xcmnrrs, {mopdRegCCD, mopdReg64IS,mopdReg64IS,mopdBitShift64},0,kLtAlu,"cmn","1,2,3",1)
/* MOP_xwcmnrre -- register, shifted register, AArch64 cmp has no dest operand */
DEFINE_MOP(MOP_xwcmnrre, {mopdRegCCD, mopdReg64IS,mopdReg32IS,mopdExtendShift64},0,kLtAlu,"cmn","1,2,3",1)

/* AArch64 branches */
/* MOP_xbr -- branch to register */
DEFINE_MOP(MOP_xbr, {mopdReg64IS,mopdLiteral},ISUNCONDBRANCH,kLtBranch,"br","0",1)
/* MOP_Tbbuncond */
DEFINE_MOP(MOP_xuncond, {mopdLabel},ISUNCONDBRANCH,kLtBranch,"b","0",1)

/* MOP_wcbnz --- Compare and Branch on Nonzero */
DEFINE_MOP(MOP_wcbnz, {mopdReg32IS,mopdLabel},ISCONDBRANCH,kLtBranch,"cbnz","0,1",1)
/* MOP_xcbnz */
DEFINE_MOP(MOP_xcbnz, {mopdReg64IS,mopdLabel},ISCONDBRANCH,kLtBranch,"cbnz","0,1",1)
/* MOP_wcbz --- Compare and Branch on zero */
DEFINE_MOP(MOP_wcbz, {mopdReg32IS,mopdLabel},ISCONDBRANCH,kLtBranch,"cbz","0,1",1)
/* MOP_xcbz */
DEFINE_MOP(MOP_xcbz, {mopdReg64IS,mopdLabel},ISCONDBRANCH,kLtBranch,"cbz","0,1",1)

/* MOP_wtbnz --- Test bit and Branch if Nonzero */
DEFINE_MOP(MOP_wtbnz, {mopdReg32IS,mopdImm8,mopdLabel},ISCONDBRANCH,kLtBranch,"tbnz","0,1,2",1)
/* MOP_xtbnz */
DEFINE_MOP(MOP_xtbnz, {mopdReg64IS,mopdImm8,mopdLabel},ISCONDBRANCH,kLtBranch,"tbnz","0,1,2",1)
/* MOP_wtbz --- Test bit and Branch if Zero */
DEFINE_MOP(MOP_wtbz, {mopdReg32IS,mopdImm8,mopdLabel},ISCONDBRANCH,kLtBranch,"tbz","0,1,2",1)
/* MOP_xtbz */
DEFINE_MOP(MOP_xtbz, {mopdReg64IS,mopdImm8,mopdLabel},ISCONDBRANCH,kLtBranch,"tbz","0,1,2",1)

/* AARCH64 STORES */
/* MOP_wstrb -- Store Register Byte */
DEFINE_MOP(MOP_wstrb, {mopdReg32IS,mopdMem8D},ISSTORE|CANTHROW,kLtStore1,"strb","0,1",1)
/* MOP_wstrh -- Store Register Halfword */
DEFINE_MOP(MOP_wstrh, {mopdReg32IS,mopdMem16D},ISSTORE|CANTHROW,kLtStore1,"strh","0,1",1)
/* MOP_wstr -- Store Register Word */
DEFINE_MOP(MOP_wstr, {mopdReg32IS,mopdMem32D},ISSTORE|CANTHROW,kLtStore1,"str","0,1",1)
/* MOP_xstr -- Store Register Double word */
DEFINE_MOP(MOP_xstr, {mopdReg64IS,mopdMem64D},ISSTORE|CANTHROW,kLtStore2,"str","0,1",1)

/* MOP_sstr -- Store Register SIMD/FP Float */
DEFINE_MOP(MOP_sstr, {mopdReg32FS,mopdMem32D},ISSTORE|CANTHROW,kLtStore2,"str","0,1",1)
/* MOP_dstr -- Store Register SIMD/FP Double */
DEFINE_MOP(MOP_dstr, {mopdReg64FS,mopdMem64D},ISSTORE|CANTHROW,kLtStore3plus,"str","0,1",1)
/* MOP_qstr -- Store Register SIMD/FP Double */
DEFINE_MOP(MOP_qstr, {mopdReg128VS,mopdMem128D},ISSTORE|CANTHROW,kLtStore3plus,"str","0,1",1)

/* AArch64 STP. */
/* MOP_wstp */
DEFINE_MOP(MOP_wstp, {mopdReg32IS,mopdReg32IS,mopdMem32PD},ISSTORE|ISSTOREPAIR|CANTHROW,kLtStore2,"stp","0,1,2",1)
/* MOP_xstp */
DEFINE_MOP(MOP_xstp, {mopdReg64IS,mopdReg64IS,mopdMem64PD},ISSTORE|ISSTOREPAIR|CANTHROW,kLtStore3plus,"stp","0,1,2",1)
/* AArch64 does not define STPSW. It has no practical value. */
/* MOP_sstp */
DEFINE_MOP(MOP_sstp, {mopdReg32FS,mopdReg32FS,mopdMem32D},ISSTORE|ISSTOREPAIR|CANTHROW,kLtAdvsimdMulQ,"stp","0,1,2",1)
/* MOP_dstp */
DEFINE_MOP(MOP_dstp, {mopdReg64FS,mopdReg64FS,mopdMem64D},ISSTORE|ISSTOREPAIR|CANTHROW,kLtAdvsimdMulQ,"stp","0,1,2",1)

/* AARCH64 Store with Release semantics */
/* MOP_wstlrb -- Store-Release Register Byte */
DEFINE_MOP(MOP_wstlrb, {mopdReg32IS,mopdMem8D},ISSTORE|HASRELEASE|CANTHROW,kLtStore1,"stlrb","0,1",1)
/* MOP_wstlrh -- Store-Release Register Halfword */
DEFINE_MOP(MOP_wstlrh, {mopdReg32IS,mopdMem16D},ISSTORE|HASRELEASE|CANTHROW,kLtStore1,"stlrh","0,1",1)
/* MOP_wstlr -- Store-Release Register Word */
DEFINE_MOP(MOP_wstlr, {mopdReg32IS,mopdMem32D},ISSTORE|HASRELEASE|CANTHROW,kLtStore1,"stlr","0,1",1)
/* MOP_xstlr -- Store-Release Register Double word */
DEFINE_MOP(MOP_xstlr, {mopdReg64IS,mopdMem64D},ISSTORE|HASRELEASE|CANTHROW,kLtStore1,"stlr","0,1",1)

/* AARCH64 Store exclusive with/without release semantics */
DEFINE_MOP(MOP_wstxrb, {mopdReg32ID,mopdReg32IS,mopdMem8D, },ISSTORE|ISATOMIC|CANTHROW,kLtStore1,"stxrb","0,1,2",1)
DEFINE_MOP(MOP_wstxrh, {mopdReg32ID,mopdReg32IS,mopdMem16D},ISSTORE|ISATOMIC|CANTHROW,kLtStore1,"stxrh","0,1,2",1)
DEFINE_MOP(MOP_wstxr,  {mopdReg32ID,mopdReg32IS,mopdMem32D},ISSTORE|ISATOMIC|CANTHROW,kLtStore1,"stxr","0,1,2",1)
DEFINE_MOP(MOP_xstxr,  {mopdReg32ID,mopdReg64IS,mopdMem64D},ISSTORE|ISATOMIC|CANTHROW,kLtStore1,"stxr","0,1,2",1)

DEFINE_MOP(MOP_wstlxrb,{mopdReg32ID,mopdReg32IS,mopdMem8D, },ISSTORE|ISATOMIC|HASRELEASE|CANTHROW,kLtStore1,"stlxrb","0,1,2",1)
DEFINE_MOP(MOP_wstlxrh,{mopdReg32ID,mopdReg32IS,mopdMem16D},ISSTORE|ISATOMIC|HASRELEASE|CANTHROW,kLtStore1,"stlxrh","0,1,2",1)
DEFINE_MOP(MOP_wstlxr, {mopdReg32ID,mopdReg32IS,mopdMem32D},ISSTORE|ISATOMIC|HASRELEASE|CANTHROW,kLtStore1,"stlxr","0,1,2",1)
DEFINE_MOP(MOP_xstlxr, {mopdReg32ID,mopdReg64IS,mopdMem64D},ISSTORE|ISATOMIC|HASRELEASE|CANTHROW,kLtStore1,"stlxr","0,1,2",1)

DEFINE_MOP(MOP_wstlxp, {mopdReg32ID,mopdReg32IS,mopdReg32IS,mopdMem64D},ISSTORE|ISSTOREPAIR|ISATOMIC|HASRELEASE|CANTHROW,kLtStore1,"stlxp","0,1,2,3",1)
DEFINE_MOP(MOP_xstlxp, {mopdReg32ID,mopdReg64IS,mopdReg64IS,mopdMem64D},ISSTORE|ISSTOREPAIR|ISATOMIC|HASRELEASE|CANTHROW,kLtStore1,"stlxp","0,1,2,3",1)

/* Memory barriers */
/* MOP_dmb_ishld */
DEFINE_MOP(MOP_dmb_ishld, {}, HASACQUIRE|ISDMB,kLtBranch, "dmb\tishld", "",1)
/* MOP_dmb_ishst */
DEFINE_MOP(MOP_dmb_ishst, {}, HASRELEASE|ISDMB,kLtBranch, "dmb\tishst", "",1)
/* MOP_dmb_ish */
DEFINE_MOP(MOP_dmb_ish,   {}, HASACQUIRE|HASRELEASE|ISDMB,kLtBranch, "dmb\tish", "",1)

/* Neon simd, r:nonvector reg, u:64b vector reg, v:128b vector reg */
DEFINE_MOP(MOP_vmovui,  {mopdReg64VD,mopdImm8},ISMOVE|ISVECTOR,kLtFpalu,"movi","0,1",1)
DEFINE_MOP(MOP_vmovvi,  {mopdReg128VD,mopdImm8},ISMOVE|ISVECTOR,kLtFpalu,"movi","0,1",1)
DEFINE_MOP(MOP_vwdupur, {mopdReg64VD,mopdReg32IS},ISMOVE|ISVECTOR,kLtFpalu,"dup","0,1",1)
DEFINE_MOP(MOP_vwdupvr, {mopdReg128VD,mopdReg32IS},ISMOVE|ISVECTOR,kLtFpalu,"dup","0,1",1)
DEFINE_MOP(MOP_vxdupur, {mopdReg64VD,mopdReg64IS},ISMOVE|ISVECTOR,kLtFpalu,"dup","0,1",1)
DEFINE_MOP(MOP_vxdupvr, {mopdReg128VD,mopdReg64IS},ISMOVE|ISVECTOR,kLtFpalu,"dup","0,1",1)
DEFINE_MOP(MOP_vduprv,  {mopdReg64FD,mopdReg128VS},ISMOVE|ISVECTOR,kLtFpalu,"dup","0,1",1)
DEFINE_MOP(MOP_vextuuui,{mopdReg64VD,mopdReg64VS,mopdReg64VS,mopdImm8},ISVECTOR,kLtFpalu,"ext","0,1,2,3",1)
DEFINE_MOP(MOP_vextvvvi,{mopdReg128VD,mopdReg128VS,mopdReg128VS,mopdImm8},ISVECTOR,kLtFpalu,"ext","0,1,2,3",1)
DEFINE_MOP(MOP_vspadduu,{mopdReg64VD,mopdReg64VS},ISVECTOR,kLtAlu,"saddlp","0,1",1)
DEFINE_MOP(MOP_vspaddvv,{mopdReg128VD,mopdReg128VS},ISVECTOR,kLtAlu,"saddlp","0,1",1)
DEFINE_MOP(MOP_vupadduu,{mopdReg64VD,mopdReg64VS},ISVECTOR,kLtAlu,"uaddlp","0,1",1)
DEFINE_MOP(MOP_vupaddvv,{mopdReg128VD,mopdReg128VS},ISVECTOR,kLtAlu,"uaddlp","0,1",1)
DEFINE_MOP(MOP_vwmovru, {mopdReg32ID,mopdReg64VS},ISMOVE|ISVECTOR,kLtFpalu,"umov","0,1",1)
DEFINE_MOP(MOP_vwmovrv, {mopdReg32ID,mopdReg128VS},ISMOVE|ISVECTOR,kLtFpalu,"umov","0,1",1)
DEFINE_MOP(MOP_vxmovrv, {mopdReg64ID,mopdReg128VS},ISMOVE|ISVECTOR,kLtFpalu,"umov","0,1",1)
DEFINE_MOP(MOP_vwinsur, {mopdReg64VDS,mopdReg32IS},ISMOVE|ISPARTDEF|ISVECTOR,kLtFpalu,"ins","0,1",1)
DEFINE_MOP(MOP_vxinsur, {mopdReg64VDS,mopdReg64IS},ISMOVE|ISPARTDEF|ISVECTOR,kLtFpalu,"ins","0,1",1)
DEFINE_MOP(MOP_vwinsvr, {mopdReg128VDS,mopdReg32IS},ISMOVE|ISPARTDEF|ISVECTOR,kLtFpalu,"ins","0,1",1)
DEFINE_MOP(MOP_vxinsvr, {mopdReg128VDS,mopdReg64IS},ISMOVE|ISPARTDEF|ISVECTOR,kLtFpalu,"ins","0,1",1)
DEFINE_MOP(MOP_vmovuu,  {mopdReg64VD,mopdReg64VS},ISMOVE|ISVECTOR,kLtFpalu,"mov","0,1",1)
DEFINE_MOP(MOP_vmovvv,  {mopdReg128VD,mopdReg128VS},ISMOVE|ISVECTOR,kLtFpalu,"mov","0,1",1)
DEFINE_MOP(MOP_vrev16vv,{mopdReg128VD,mopdReg128VS},ISVECTOR,kLtFpalu,"rev16","0,1",1)
DEFINE_MOP(MOP_vrev32vv,{mopdReg128VD,mopdReg128VS},ISVECTOR,kLtFpalu,"rev32","0,1",1)
DEFINE_MOP(MOP_vrev64vv,{mopdReg128VD,mopdReg128VS},ISVECTOR,kLtFpalu,"rev64","0,1",1)
DEFINE_MOP(MOP_vbaddvrv,{mopdReg8FD,mopdReg128VS},ISVECTOR,kLtFpalu,"addv","0,1",1)
DEFINE_MOP(MOP_vhaddvrv,{mopdReg16FD,mopdReg128VS},ISVECTOR,kLtFpalu,"addv","0,1",1)
DEFINE_MOP(MOP_vsaddvrv,{mopdReg32FD,mopdReg128VS},ISVECTOR,kLtFpalu,"addv","0,1",1)
DEFINE_MOP(MOP_vxtnuv,  {mopdReg64VD,mopdReg128VS},ISVECTOR,kLtFpalu,"xtn","0,1",1)

DEFINE_MOP(MOP_vzcmequu,{mopdReg64VD,mopdReg64VS,mopdImm8},ISVECTOR,kLtFpalu,"cmeq","0,1,2",1)
DEFINE_MOP(MOP_vzcmgtuu,{mopdReg64VD,mopdReg64VS,mopdImm8},ISVECTOR,kLtFpalu,"cmgt","0,1,2",1)
DEFINE_MOP(MOP_vzcmgeuu,{mopdReg64VD,mopdReg64VS,mopdImm8},ISVECTOR,kLtFpalu,"cmge","0,1,2",1)
DEFINE_MOP(MOP_vzcmltuu,{mopdReg64VD,mopdReg64VS,mopdImm8},ISVECTOR,kLtFpalu,"cmlt","0,1,2",1)
DEFINE_MOP(MOP_vzcmleuu,{mopdReg64VD,mopdReg64VS,mopdImm8},ISVECTOR,kLtFpalu,"cmle","0,1,2",1)
DEFINE_MOP(MOP_vzcmeqvv,{mopdReg128VD,mopdReg128VS,mopdImm8},ISVECTOR,kLtFpalu,"cmeq","0,1,2",1)
DEFINE_MOP(MOP_vzcmgtvv,{mopdReg128VD,mopdReg128VS,mopdImm8},ISVECTOR,kLtFpalu,"cmgt","0,1,2",1)
DEFINE_MOP(MOP_vzcmgevv,{mopdReg128VD,mopdReg128VS,mopdImm8},ISVECTOR,kLtFpalu,"cmge","0,1,2",1)
DEFINE_MOP(MOP_vzcmltvv,{mopdReg128VD,mopdReg128VS,mopdImm8},ISVECTOR,kLtFpalu,"cmlt","0,1,2",1)
DEFINE_MOP(MOP_vzcmlevv,{mopdReg128VD,mopdReg128VS,mopdImm8},ISVECTOR,kLtFpalu,"cmle","0,1,2",1)
DEFINE_MOP(MOP_vcmequuu,{mopdReg64VD,mopdReg64VS,mopdReg64VS},ISVECTOR,kLtFpalu,"cmeq","0,1,2",1)
DEFINE_MOP(MOP_vcmgeuuu,{mopdReg64VD,mopdReg64VS,mopdReg64VS},ISVECTOR,kLtFpalu,"cmge","0,1,2",1)
DEFINE_MOP(MOP_vcmgtuuu,{mopdReg64VD,mopdReg64VS,mopdReg64VS},ISVECTOR,kLtFpalu,"cmgt","0,1,2",1)
DEFINE_MOP(MOP_vcmhiuuu,{mopdReg64VD,mopdReg64VS,mopdReg64VS},ISVECTOR,kLtFpalu,"cmhi","0,1,2",1)
DEFINE_MOP(MOP_vcmhsuuu,{mopdReg64VD,mopdReg64VS,mopdReg64VS},ISVECTOR,kLtFpalu,"cmhs","0,1,2",1)
DEFINE_MOP(MOP_vcmeqvvv,{mopdReg128VD,mopdReg128VS,mopdReg128VS},ISVECTOR,kLtFpalu,"cmeq","0,1,2",1)
DEFINE_MOP(MOP_vcmgevvv,{mopdReg128VD,mopdReg128VS,mopdReg128VS},ISVECTOR,kLtFpalu,"cmge","0,1,2",1)
DEFINE_MOP(MOP_vcmgtvvv,{mopdReg128VD,mopdReg128VS,mopdReg128VS},ISVECTOR,kLtFpalu,"cmgt","0,1,2",1)
DEFINE_MOP(MOP_vcmhivvv,{mopdReg128VD,mopdReg128VS,mopdReg128VS},ISVECTOR,kLtFpalu,"cmhi","0,1,2",1)
DEFINE_MOP(MOP_vcmhsvvv,{mopdReg128VD,mopdReg128VS,mopdReg128VS},ISVECTOR,kLtFpalu,"cmhs","0,1,2",1)

DEFINE_MOP(MOP_vshluuu, {mopdReg64VD,mopdReg64VS,mopdReg64VS},ISVECTOR,kLtFpalu,"sshl","0,1,2",1)
DEFINE_MOP(MOP_vshlvvv, {mopdReg128VD,mopdReg128VS,mopdReg128VS},ISVECTOR,kLtFpalu,"sshl","0,1,2",1)
DEFINE_MOP(MOP_vushluuu,{mopdReg64VD,mopdReg64VS,mopdReg64VS},ISVECTOR,kLtFpalu,"ushl","0,1,2",1)
DEFINE_MOP(MOP_vushlvvv,{mopdReg128VD,mopdReg128VS,mopdReg128VS},ISVECTOR,kLtFpalu,"ushl","0,1,2",1)

DEFINE_MOP(MOP_vushluui,{mopdReg64VD,mopdReg64VS,mopdImm8},ISVECTOR,kLtFpalu,"shl","0,1,2",1)
DEFINE_MOP(MOP_vushlvvi,{mopdReg128VD,mopdReg128VS,mopdImm8},ISVECTOR,kLtFpalu,"shl","0,1,2",1)
DEFINE_MOP(MOP_vushruui,{mopdReg64VD,mopdReg64VS,mopdImm8},ISVECTOR,kLtFpalu,"ushr","0,1,2",1)
DEFINE_MOP(MOP_vushrvvi,{mopdReg128VD,mopdReg128VS,mopdImm8},ISVECTOR,kLtFpalu,"ushr","0,1,2",1)

DEFINE_MOP(MOP_vshruui, {mopdReg64VD,mopdReg64VS,mopdImm8},ISVECTOR,kLtFpalu,"sshr","0,1,2",1)
DEFINE_MOP(MOP_vshrvvi, {mopdReg128VD,mopdReg128VS,mopdImm8},ISVECTOR,kLtFpalu,"sshr","0,1,2",1)
DEFINE_MOP(MOP_vshrnuvi,{mopdReg64VD,mopdReg128VS,mopdImm8},ISVECTOR,kLtFpalu,"shrn","0,1,2",1)

DEFINE_MOP(MOP_vtbl1vvv,{mopdReg128VD,mopdReg128VS,mopdReg128VS},ISVECTOR,kLtFpalu,"tbl","0,1,2",1)
DEFINE_MOP(MOP_vmaddvvv,{mopdReg128VDS,mopdReg64VS,mopdReg64VS},ISVECTOR,kLtFpalu,"umlal","0,1,2",1)
DEFINE_MOP(MOP_vmullvvv,{mopdReg128VD,mopdReg64VS,mopdReg64VS},ISVECTOR,kLtFpalu,"umull","0,1,2",1)
DEFINE_MOP(MOP_vadduuu, {mopdReg64VD,mopdReg64VS,mopdReg64VS},ISVECTOR,kLtFpalu,"add","0,1,2",1)
DEFINE_MOP(MOP_vaddvvv, {mopdReg128VD,mopdReg128VS,mopdReg128VS},ISVECTOR,kLtFpalu,"add","0,1,2",1)
DEFINE_MOP(MOP_vmuluuu, {mopdReg64VD,mopdReg64VS,mopdReg64VS},ISVECTOR,kLtFpalu,"mul","0,1,2",1)
DEFINE_MOP(MOP_vmulvvv, {mopdReg128VD,mopdReg128VS,mopdReg128VS},ISVECTOR,kLtFpalu,"mul","0,1,2",1)
DEFINE_MOP(MOP_vsubuuu, {mopdReg64VD,mopdReg64VS,mopdReg64VS},ISVECTOR,kLtFpalu,"sub","0,1,2",1)
DEFINE_MOP(MOP_vsubvvv, {mopdReg128VD,mopdReg128VS,mopdReg128VS},ISVECTOR,kLtFpalu,"sub","0,1,2",1)
DEFINE_MOP(MOP_vanduuu, {mopdReg64VD,mopdReg64VS,mopdReg64VS},ISVECTOR,kLtFpalu,"and","0,1,2",1)
DEFINE_MOP(MOP_vandvvv, {mopdReg128VD,mopdReg128VS,mopdReg128VS},ISVECTOR,kLtFpalu,"and","0,1,2",1)
DEFINE_MOP(MOP_voruuu,  {mopdReg64VDS,mopdReg64VS,mopdReg64VS},ISVECTOR,kLtFpalu,"orr","0,1,2",1)
DEFINE_MOP(MOP_vorvvv,  {mopdReg128VD,mopdReg128VS,mopdReg128VS},ISVECTOR,kLtFpalu,"orr","0,1,2",1)
DEFINE_MOP(MOP_vxoruuu, {mopdReg64VDS,mopdReg64VS,mopdReg64VS},ISVECTOR,kLtFpalu,"eor","0,1,2",1)
DEFINE_MOP(MOP_vxorvvv, {mopdReg128VD,mopdReg128VS,mopdReg128VS},ISVECTOR,kLtFpalu,"eor","0,1,2",1)
DEFINE_MOP(MOP_vnotuu,  {mopdReg64VDS,mopdReg64VS},ISVECTOR,kLtFpalu,"not","0,1",1)
DEFINE_MOP(MOP_vnotvv,  {mopdReg128VD,mopdReg128VS},ISVECTOR,kLtFpalu,"not","0,1",1)
DEFINE_MOP(MOP_vneguu,  {mopdReg64VDS,mopdReg64VS},ISVECTOR,kLtFpalu,"neg","0,1",1)
DEFINE_MOP(MOP_vnegvv,  {mopdReg128VD,mopdReg128VS},ISVECTOR,kLtFpalu,"neg","0,1",1)
DEFINE_MOP(MOP_vzip1vvv,{mopdReg64VD,mopdReg64VS,mopdReg64VS},ISVECTOR,kLtFpalu,"zip1","0,1,2",1)
DEFINE_MOP(MOP_vzip2vvv,{mopdReg64VD,mopdReg64VS,mopdReg64VS},ISVECTOR,kLtFpalu,"zip2","0,1,2",1)

/*
 * MOP_clinit
 * will be emit to four instructions in a row:
 * adrp  xd, :got:__classinfo__Ljava_2Futil_2Fconcurrent_2Fatomic_2FAtomicInteger_3B
 * ldr xd, [xd,#:got_lo12:__classinfo__Ljava_2Futil_2Fconcurrent_2Fatomic_2FAtomicInteger_3B]
 * ldr xd, [xd,#112]
 * ldr wzr, [xd]
 */
DEFINE_MOP(MOP_clinit, {mopdReg64ID,mopdLiteral},ISATOMIC|CANTHROW,kLtClinit,"intrinsic_clinit","0,1",4)

/*
 * MOP_counter
 * will be emit to five instructions in a row:
 * adrp  x1, :got:__profile_table + idx
 * ldr w17, [x1,#:got_lo12:__profile_table]
 * add w17, w17, #1
 * str w17,[x1,,#:got_lo12:__profile_table]
 */
DEFINE_MOP(MOP_counter, {mopdReg64ID,mopdLiteral},ISATOMIC|CANTHROW,kLtClinit,"intrinsic_counter","0,1", 4)

/*
 * will be emit to two instrunctions in a row:
 * ldr wd, [xs]  // xd and xs should be differenct register
 * ldr wd, [xd]
 */
DEFINE_MOP(MOP_lazy_ldr, {mopdReg32ID,mopdReg64IS},ISATOMIC|CANTHROW,kLtClinitTail,"intrinsic_lazyload","0,1",2)

/*
 * will be emit to three instrunctions in a row:
 * adrp  xd, :got:__staticDecoupleValueOffset$$xxx+offset
 * ldr xd, [xd,#:got_lo12:__staticDecoupleValueOffset$$xx+offset]
 * ldr xzr, [xd]
 */
DEFINE_MOP(MOP_lazy_ldr_static, {mopdReg64ID,mopdLiteral},ISATOMIC|CANTHROW,kLtAdrpLdr,"intrinsic_lazyloadstatic","0,1",3)

/* A pseudo instruction followed MOP_lazy_ldr, to make sure xs and xd be allocated to different physical registers. */
DEFINE_MOP(MOP_lazy_tail, {mopdReg32IS,mopdReg64IS},0,kLtUndef,"pseudo_lazy_tail","",0)

/* will be emit to two instructions in a row:
 * adrp    xd, _PTR__cinf_Ljava_2Flang_2FSystem_3B
 * ldr     xd, [xd, #:lo12:_PTR__cinf_Ljava_2Flang_2FSystem_3B]
 * MOP_adrp_ldr
 */
DEFINE_MOP(MOP_adrp_ldr, {mopdReg64ID, mopdLiteral},ISATOMIC|CANTHROW,kLtAdrpLdr,"intrinsic_adrpldr","0,1",2)

/* will be emit to two instructions in a row:
 * adrp    xd, label
 * add     xd, xd, #:lo12:label
 */
DEFINE_MOP(MOP_adrp_label, {mopdReg64ID, mopdImm64},0,kLtAlu,"intrinsic_adrplabel","0,1", 2)

/*
 * will be emit to three instrunctions in a row:
 * adrp  xd, :got:__arrayClassCacheTable$$xxx+offset
 * ldr xd, [xd,#:got_lo12:__arrayClassCacheTable$$xx+offset]
 * ldr xzr, [xd]
 */
DEFINE_MOP(MOP_arrayclass_cache_ldr, {mopdReg64ID,mopdLiteral},ISATOMIC|CANTHROW,kLtAdrpLdr,"intrinsic_loadarrayclass","0,1",3)

/*
 * ldr x17, [xs,#112]
 * ldr wzr, [x17]
 */
DEFINE_MOP(MOP_clinit_tail, {mopdReg64IS},ISATOMIC|CANTHROW,kLtClinitTail,"intrinsic_clinit_tail","0",2)

/*
 * intrinsic Unsafe.getAndAddInt
 * intrinsic_get_add_int w0, xt, wt, ws, x1, x2, w3, label
 * add    xt, x1, x2
 * label:
 * ldaxr  w0, [xt]
 * add    wt, w0, w3
 * stlxr  ws, wt, [xt]
 * cbnz   ws, label
 */
DEFINE_MOP(MOP_get_and_addI, {mopdReg32ID,mopdReg64ID,mopdReg32ID,mopdReg32ID,mopdReg64IS,mopdReg64IS,mopdReg32IS,mopdLabel},HASLOOP|CANTHROW,kLtBranch,"intrinsic_get_add_int","",5)
/*
 * intrinsic Unsafe.getAndAddLong
 * intrinsic_get_add_long x0, xt, xs, ws, x1, x2, x3, ws, label
 * add    xt, x1, x2
 * label:
 * ldaxr  x0, [xt]
 * add    xs, x0, x3
 * stlxr  ws, x2, [xt]
 * cbnz   ws, label
 */
DEFINE_MOP(MOP_get_and_addL, {mopdReg64ID,mopdReg64ID,mopdReg64ID,mopdReg32ID,mopdReg64IS,mopdReg64IS,mopdReg64IS,mopdLabel},HASLOOP|CANTHROW,kLtBranch,"intrinsic_get_add_long","",5)

/*
 * intrinsic Unsafe.getAndSetInt
 * intrinsic_get_set_int w0, xt, x1, x2, w3, label
 * add    xt, x1, x2
 * label:
 * ldaxr  w0, [xt]
 * stlxr  w2, w3, [xt]
 * cbnz   w2, label
 */
DEFINE_MOP(MOP_get_and_setI, {mopdReg32ID,mopdReg64ID,mopdReg32ID,mopdReg64IS,mopdReg64IS,mopdReg32IS,mopdLabel},HASLOOP|CANTHROW,kLtBranch,"intrinsic_get_set_int","0,1,2,3,4",4)
/*
 * intrinsic Unsafe.getAndSetLong
 * intrinsic_get_set_long x0, x1, x2, x3, label
 * add    xt, x1, x2
 * label:
 * ldaxr  x0, [xt]
 * stlxr  w2, x3, [xt]
 * cbnz   w2, label
 */
DEFINE_MOP(MOP_get_and_setL, {mopdReg64ID,mopdReg64ID,mopdReg32ID,mopdReg64IS,mopdReg64IS,mopdReg64IS,mopdLabel},HASLOOP|CANTHROW,kLtBranch,"intrinsic_get_set_long","0,1,2,3,4",4)

/*
 * intrinsic Unsafe.compareAndSwapInt
 * intrinsic_compare_swap_int x0, xt, ws, x1, x2, w3, w4, lable1, label2
 * add       xt, x1, x2
 * label1:
 * ldaxr     ws, [xt]
 * cmp       ws, w3
 * b.ne      label2
 * stlxr     ws, w4, [xt]
 * cbnz      ws, label1
 * label2:
 * cset      x0, eq
 */
DEFINE_MOP(MOP_compare_and_swapI, {mopdReg64ID,mopdReg64ID,mopdReg32ID,mopdReg64IS,mopdReg64IS,mopdReg32IS,mopdReg32IS,mopdLabel,mopdLabel},HASLOOP|CANTHROW,kLtBranch,"intrinsic_compare_swap_int","0,1,2,3,4,5,6",7)
/*
 * intrinsic Unsafe.compareAndSwapLong
 * intrinsic_compare_swap_long x0, xt, xs, x1, x2, x3, x4, lable1, label2
 * add       xt, x1, x2
 * label1:
 * ldaxr     xs, [xt]
 * cmp       xs, x3
 * b.ne      label2
 * stlxr     ws, x4, [xt]
 * cbnz      ws, label1
 * label2:
 * cset      x0, eq
 */
DEFINE_MOP(MOP_compare_and_swapL, {mopdReg64ID,mopdReg64ID,mopdReg64ID,mopdReg64IS,mopdReg64IS,mopdReg64IS,mopdReg64IS,mopdLabel,mopdLabel},HASLOOP|CANTHROW,kLtBranch,"intrinsic_compare_swap_long","0,1,2,3,4,5,6",7)

/*
 * intrinsic String.indexOf(Ljava/lang/String;)I
 * intrinsic_string_indexof w0, x1, w2, x3, w4, x5, x6, x7, x8, x9, w10, Label.FIRST_LOOP, Label.STR2_NEXT, Label.STR1_LOOP, Label.STR1_NEXT, Label.LAST_WORD, Label.NOMATCH, Label.RET
 * cmp       w4, w2
 * b.gt      .Label.NOMATCH
 * sub       w2, w2, w4
 * sub       w4, w4, #8
 * mov       w10, w2
 * uxtw      x4, w4
 * uxtw      x2, w2
 * add       x3, x3, x4
 * add       x1, x1, x2
 * neg       x4, x4
 * neg       x2, x2
 * ldr       x5, [x3,x4]
 * .Label.FIRST_LOOP:
 * ldr       x7, [x1,x2]
 * cmp       x5, x7
 * b.eq      .Label.STR1_LOOP
 * .Label.STR2_NEXT:
 * adds      x2, x2, #1
 * b.le      .Label.FIRST_LOOP
 * b         .Label.NOMATCH
 * .Label.STR1_LOOP:
 * adds      x8, x4, #8
 * add       x9, x2, #8
 * b.ge      .Label.LAST_WORD
 * .Label.STR1_NEXT:
 * ldr       x6, [x3,x8]
 * ldr       x7, [x1,x9]
 * cmp       x6, x7
 * b.ne      .Label.STR2_NEXT
 * adds      x8, x8, #8
 * add       x9, x9, #8
 * b.lt      .Label.STR1_NEXT
 * .Label.LAST_WORD:
 * ldr       x6, [x3]
 * sub       x9, x1, x4
 * ldr       x7, [x9,x2]
 * cmp       x6, x7
 * b.ne      .Label.STR2_NEXT
 * add       w0, w10, w2
 * b         .Label.RET
 * .Label.NOMATCH:
 * mov       w0, #-1
 * .Label.RET:
 */
DEFINE_MOP(MOP_string_indexof, {mopdReg32ID,mopdReg64IDS,mopdReg32IDS,mopdReg64IDS,mopdReg32IDS,mopdReg64ID,mopdReg64ID,mopdReg64ID,mopdReg64ID,mopdReg64ID,mopdReg32ID,mopdLabel,mopdLabel,mopdLabel,mopdLabel,mopdLabel,mopdLabel,mopdLabel},HASLOOP|CANTHROW,kLtBranch,"intrinsic_string_indexof","0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17",36)

/* MOP_tail_call_opt_xbl -- branch without link (call); this is a special definition */
DEFINE_MOP(MOP_tail_call_opt_xbl,  {mopdFuncName,mopdLISTS},CANTHROW,kLtBranch,"b","0", 1)
/* MOP_tail_call_opt_xblr -- branch without link (call) to register; this is a special definition */
DEFINE_MOP(MOP_tail_call_opt_xblr, {mopdReg64IS,mopdLISTS},CANTHROW,kLtBranch,"br","0", 1)

/* MOP_pseudo_param_def_x, */
DEFINE_MOP(MOP_pseudo_param_def_x, {mopdReg64ID},0,kLtUndef,"//MOP_pseudo_param_def","0", 0)

/* MOP_pseudo_param_def_w, */
DEFINE_MOP(MOP_pseudo_param_def_w, {mopdReg32ID},0,kLtUndef,"//MOP_pseudo_param_def","0", 0)

/* MOP_pseudo_param_def_d, */
DEFINE_MOP(MOP_pseudo_param_def_d, {mopdReg64FD},0,kLtUndef,"//MOP_pseudo_param_def","0", 0)

/* MOP_pseudo_param_def_s, */
DEFINE_MOP(MOP_pseudo_param_def_s, {mopdReg32FD},0,kLtUndef,"//MOP_pseudo_param_def","0", 0)

/* MOP_pseudo_param_store_x, */
DEFINE_MOP(MOP_pseudo_param_store_x, {mopdMem64D},0,kLtUndef,"//MOP_pseudo_param_store_x","0", 0)

/* MOP_pseudo_param_store_w, */
DEFINE_MOP(MOP_pseudo_param_store_w, {mopdMem32D},0,kLtUndef,"//MOP_pseudo_param_store_w","0", 0)

/* MOP_pseudo_ref_init_x, */
DEFINE_MOP(MOP_pseudo_ref_init_x, {mopdMem64D},0,kLtUndef,"//MOP_pseudo_ref_init_x","0",  0)

/* MOP_pseudo_ret_int, */
DEFINE_MOP(MOP_pseudo_ret_int, {mopdReg64IS},0,kLtUndef,"//MOP_pseudo_ret_int","", 0)

/* MOP_pseudo_ret_float, */
DEFINE_MOP(MOP_pseudo_ret_float, {mopdReg64FS},0,kLtUndef,"//MOP_pseudo_ret_float","", 0)

/* When exception occurs, R0 and R1 may be defined by runtime code. */
/* MOP_pseudo_eh_def_x, */
DEFINE_MOP(MOP_pseudo_eh_def_x, {mopdReg64ID},0,kLtUndef,"//MOP_pseudo_eh_def_x","0", 0)

/* for comments */
/* MOP_comment */
DEFINE_MOP(MOP_comment, {mopdSTRING},0,kLtUndef,"//","0", 0)
/*MOP_nop */
DEFINE_MOP(MOP_nop, {},0,kLtAlu,"nop","", 0)


/* A pseudo instruction that used for seperating dependence graph. */
/* MOP_pseudo_dependence_seperator, */
DEFINE_MOP(MOP_pseudo_dependence_seperator, {},0,kLtUndef,"//MOP_pseudo_dependence_seperator","0", 0)


/* A pseudo instruction that used for replacing MOP_clinit_tail after clinit merge in scheduling. */
/* MOP_pseudo_none, */
DEFINE_MOP(MOP_pseudo_none, {},0,kLtUndef,"//MOP_pseudo_none","0", 0)

/* end of AArch64 instructions */
